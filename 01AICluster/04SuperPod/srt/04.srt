1
00:00:00,000 --> 00:00:01,333
内容/录制:Z0MI 酱，视频剪辑/字幕:梁嘉铭

2
00:00:02,566 --> 00:00:03,200
hello 大家好

3
00:00:03,200 --> 00:00:05,933
我是那个减肥帖子从未停止

4
00:00:06,200 --> 00:00:08,450
真的行动从未开始的 ZOMI

5
00:00:18,450 --> 00:00:19,133
今天

6
00:00:19,133 --> 00:00:21,000
我们要跟大家去分享一下

7
00:00:21,000 --> 00:00:23,133
英伟达的 GB200 块的 Blackwell 系列

8
00:00:23,133 --> 00:00:24,400
里面的整体

9
00:00:24,400 --> 00:00:27,766
互联的集群的架构和相关的产品

10
00:00:28,133 --> 00:00:29,533
现在我们来到了讲集群

11
00:00:29,533 --> 00:00:30,933
真正的一个 SuperPod

12
00:00:30,933 --> 00:00:32,883
一个超节点的方式了

13
00:00:32,883 --> 00:00:33,400
那这里面

14
00:00:33,400 --> 00:00:35,733
我们会从两个维度进行入手

15
00:00:35,733 --> 00:00:40,000
第一个就是 GH200 到 NVL32

16
00:00:40,000 --> 00:00:41,683
还有包括它里面所带

17
00:00:41,683 --> 00:00:43,566
一个超节点的一个组网

18
00:00:43,566 --> 00:00:44,533
就 SuperPod 了

19
00:00:44,566 --> 00:00:46,533
另外的话我们会从另外一个维度

20
00:00:46,533 --> 00:00:51,200
也就最新一代的产品 GB200 去看 NVL72

21
00:00:51,200 --> 00:00:52,883
这里面写错了

22
00:00:52,883 --> 00:00:55,166
然后到它的一个 SuperPod

23
00:00:55,200 --> 00:00:55,483
因为

24
00:00:55,483 --> 00:00:58,250
我们现在已经制作了四期关于 NV

25
00:00:58,250 --> 00:00:59,883
Blackwell 相关的一些产品

26
00:00:59,883 --> 00:01:01,400
所以我们在这里面

27
00:01:01,400 --> 00:01:03,883
做一个简单的小结与思考

28
00:01:04,850 --> 00:01:06,850
首先我们现在马上来到了第一个内容

29
00:01:06,850 --> 00:01:08,600
看一下 GH200

30
00:01:08,600 --> 00:01:11,800
也就是 hopper 架构的一个超节点的组网

31
00:01:11,800 --> 00:01:12,733
到底是怎么实现

32
00:01:12,733 --> 00:01:14,766
还有它的一些相关的产品

33
00:01:14,850 --> 00:01:16,600
那下面这个图还是蛮有意思

34
00:01:16,600 --> 00:01:19,683
是超威的一个网上能够找到

35
00:01:19,733 --> 00:01:22,283
H200 的组网的一个 Computer Tray

36
00:01:22,450 --> 00:01:25,133
那 Compute Tray 就是它的一个计算板卡了

37
00:01:25,133 --> 00:01:26,083
那这个计算板卡

38
00:01:26,083 --> 00:01:28,650
是基于英伟达的 MGX 来进行

39
00:01:28,650 --> 00:01:30,533
设计那所谓的 GH200

40
00:01:30,533 --> 00:01:35,283
就是两个 graceCPU 和两个 H200 的 GPU

41
00:01:35,483 --> 00:01:36,083
那这里面

42
00:01:36,083 --> 00:01:39,133
我们可以看到一个 CPU 一个 GPU

43
00:01:39,133 --> 00:01:41,616
一个 CPU 一个 GPU 这种形式

44
00:01:41,616 --> 00:01:42,333
说实话

45
00:01:42,333 --> 00:01:44,483
这么觉得买 GPU200 的人相对比较少

46
00:01:44,483 --> 00:01:46,650
但是未来可能会越来越多

47
00:01:46,650 --> 00:01:47,766
或者有一部分

48
00:01:48,050 --> 00:01:50,200
国内国外厂商开始陆续的采购

49
00:01:50,200 --> 00:01:52,650
之前采购的都是 G H 100 比较多

50
00:01:52,650 --> 00:01:55,250
那另外的话刚才讲到了 Computer Tray

51
00:01:55,250 --> 00:01:57,250
我们肯定会有 Switch Tray

52
00:01:57,683 --> 00:01:59,050
因为有计算的托盘

53
00:01:59,050 --> 00:02:01,966
肯定会有一个互联的托盘

54
00:02:02,000 --> 00:02:06,733
那第一代是在 H200 里面去出现

55
00:02:06,733 --> 00:02:09,166
第一代的 NVSwitch Tray 就包含两个

56
00:02:09,166 --> 00:02:11,450
第三代的一个 NVSwitch 的芯片

57
00:02:11,450 --> 00:02:14,050
一共有 128 个 NVLink 的 Pod

58
00:02:14,083 --> 00:02:17,883
整体的通讯带宽的上限是 6.4Tb/s

59
00:02:18,483 --> 00:02:19,933
因为 NVSwitch Tray

60
00:02:19,933 --> 00:02:21,533
说实话它图还是比较难找

61
00:02:21,533 --> 00:02:23,083
我们看一下右边的这个图

62
00:02:23,083 --> 00:02:26,050
就是它对应的一个托盘了

63
00:02:26,050 --> 00:02:28,683
那接着我们了解完一个 compu tray

64
00:02:28,683 --> 00:02:30,400
还有一个 Switch Tray

65
00:02:30,400 --> 00:02:34,483
我们现在就看一下整体的一个 NVL 32

66
00:02:34,483 --> 00:02:37,250
所谓的 NVL 就是 NVLink

67
00:02:37,450 --> 00:02:38,850
把所有的 Compute Tray

68
00:02:38,850 --> 00:02:40,966
通过 switch 的一个托盘

69
00:02:40,966 --> 00:02:43,683
把它都组网整合起来

70
00:02:43,683 --> 00:02:44,250
那因此

71
00:02:44,250 --> 00:02:44,883
我们现在

72
00:02:44,883 --> 00:02:47,450
变成一个机柜的一个 Rack 的形态了

73
00:02:47,450 --> 00:02:48,483
那现在的一个 Rack

74
00:02:48,483 --> 00:02:51,683
一共有 16 个 GH200 的 compute Tray

75
00:02:51,683 --> 00:02:54,200
还有 9 个 NVSwitch 的一个 tray

76
00:02:54,283 --> 00:02:56,283
那就是我们看一下这里面

77
00:02:56,600 --> 00:02:57,966
上面是八个

78
00:02:57,966 --> 00:02:59,400
下面是八个

79
00:02:59,400 --> 00:03:00,966
中间九个

80
00:03:00,966 --> 00:03:03,966
那九个对应的就是我们的互联的 tray

81
00:03:03,966 --> 00:03:04,683
Switch Tray

82
00:03:04,683 --> 00:03:08,283
八个就是对应我们的 Grace GH200

83
00:03:08,283 --> 00:03:09,366
Grace Hopper

84
00:03:09,800 --> 00:03:12,566
所以我们就组成了这么一个 rack

85
00:03:12,566 --> 00:03:13,883
一个整柜了

86
00:03:13,883 --> 00:03:15,333
那这里面一共

87
00:03:15,333 --> 00:03:20,733
一共有 32 个 GH200 的 GPU 加 18 个 NVSwitch

88
00:03:20,733 --> 00:03:23,450
他们之间要形成一个全互联的状态

89
00:03:23,450 --> 00:03:23,850
因此

90
00:03:23,850 --> 00:03:28,800
就会变成 32 乘以 18=576 个 NVLink 得的 Port

91
00:03:29,000 --> 00:03:31,250
因为一个 NVSwitch 有 64 个 Port

92
00:03:31,250 --> 00:03:34,366
所以我们一共需要 576/64

93
00:03:34,366 --> 00:03:35,683
等于 9 个 NVSwitch

94
00:03:35,683 --> 00:03:38,166
就可以实现整体的全互联了

95
00:03:38,166 --> 00:03:39,533
那对应起来

96
00:03:39,733 --> 00:03:41,733
运用起来我们的 NVSwitch Tray

97
00:03:41,733 --> 00:03:44,366
也是刚刚好的算起来

98
00:03:44,366 --> 00:03:46,933
那我们现在来看一下另外一个图案

99
00:03:46,933 --> 00:03:47,650
可以看到

100
00:03:47,650 --> 00:03:48,800
上面这一块

101
00:03:48,966 --> 00:03:50,483
就整个 rack 里面

102
00:03:50,483 --> 00:03:52,933
上面这块就是对应的一些 power

103
00:03:52,933 --> 00:03:54,200
或者电源相关

104
00:03:54,200 --> 00:03:55,966
上面有 8 个 Compute Tray

105
00:03:56,000 --> 00:03:58,250
然后中间有 9 个 Switch Tray

106
00:03:58,250 --> 00:03:59,933
下面还有 8 个 Compute Tray

107
00:03:59,933 --> 00:04:03,333
Compute Tray 跟 switchTray 是实现上下互联

108
00:04:03,333 --> 00:04:06,083
然后最下面会有一些备用的电源

109
00:04:06,083 --> 00:04:09,483
整体就变成这么一个大的机柜了

110
00:04:11,333 --> 00:04:14,050
那我们其实刚才还漏了一点东西

111
00:04:14,050 --> 00:04:15,650
就是在我们的机柜的旁边

112
00:04:15,650 --> 00:04:16,650
其实还有一排线

113
00:04:16,650 --> 00:04:19,883
就是我们的液冷相关的一些走线了

114
00:04:19,883 --> 00:04:21,600
还有中间的一些

115
00:04:21,600 --> 00:04:23,683
相关的 NVLink 的 cable 的接口

116
00:04:24,400 --> 00:04:26,400
那整体的 SuperPod 还是蛮有意思

117
00:04:26,400 --> 00:04:29,483
刚才我们只是讲了其中的一个柜

118
00:04:29,566 --> 00:04:31,166
也就是一个 Rack

119
00:04:31,333 --> 00:04:32,133
那实际上

120
00:04:32,133 --> 00:04:34,483
GH 的整体的 SuperPod

121
00:04:34,483 --> 00:04:37,400
是由 256 个 GH200 来去实现

122
00:04:37,400 --> 00:04:38,366
并不是

123
00:04:38,883 --> 00:04:41,333
不是由刚才我们了解到的一个

124
00:04:41,333 --> 00:04:42,483
就是八个

125
00:04:42,683 --> 00:04:45,133
八个这种 xxx 来组成

126
00:04:45,283 --> 00:04:46,683
而是由 32 个

127
00:04:46,683 --> 00:04:49,933
八个 Grace hopper 的 SuperChip 来去组成

128
00:04:49,933 --> 00:04:52,733
而不是直接成八个柜这么简单

129
00:04:52,733 --> 00:04:53,683
它要实现全互联

130
00:04:53,683 --> 00:04:56,083
说它整体的拓扑还有互联的形态

131
00:04:56,083 --> 00:04:57,000
是不一样

132
00:04:57,000 --> 00:04:57,933
那我们现在

133
00:04:57,933 --> 00:04:59,933
逐个简单的去打开一下

134
00:04:59,933 --> 00:05:02,166
首先八个 hopper computay

135
00:05:02,166 --> 00:05:04,050
也就是我们实现的 8U

136
00:05:04,050 --> 00:05:06,766
每个就包含一个 GH200 的 GPU

137
00:05:06,800 --> 00:05:09,000
还有一个 Connect x 的一个

138
00:05:09,000 --> 00:05:12,200
当时候是第七代的一个 IB 的一个网卡

139
00:05:12,200 --> 00:05:14,650
另外的话是一个 200GB 的以太网

140
00:05:14,883 --> 00:05:15,883
那为什么会有以太网

141
00:05:15,883 --> 00:05:16,966
为什么会有 IB

142
00:05:16,966 --> 00:05:17,766
我们 ZOMI

143
00:05:17,766 --> 00:05:20,333
会在后面讲真正的集群组网的时候

144
00:05:20,333 --> 00:05:22,000
会跟大家去介绍

145
00:05:22,000 --> 00:05:23,600
我们这里面的重点去看看

146
00:05:23,600 --> 00:05:24,733
英伟达的 GH200

147
00:05:24,733 --> 00:05:25,600
达的 superPod

148
00:05:25,733 --> 00:05:27,600
一个整体组成的形态

149
00:05:27,683 --> 00:05:29,933
另外的话它有三个 NVSwitch 的 tray

150
00:05:29,933 --> 00:05:30,650
那一共

151
00:05:30,650 --> 00:05:33,966
就实现了 6 个 NVSwitch 相关的内容

152
00:05:33,966 --> 00:05:36,050
那这边我们还是从

153
00:05:36,050 --> 00:05:37,200
正常的去了解一下

154
00:05:37,200 --> 00:05:37,766
GH200

155
00:05:37,766 --> 00:05:40,733
一个 SuperPod 的 NVLink 的一个具体的组网

156
00:05:40,733 --> 00:05:41,850
拓扑的形态

157
00:05:41,850 --> 00:05:43,283
那下面其实还蛮有意思

158
00:05:43,283 --> 00:05:43,850
就是里面

159
00:05:43,850 --> 00:05:46,533
下面实现的是一个 switch 的一个 tray

160
00:05:46,800 --> 00:05:48,733
上面就有真正的 GH200

161
00:05:48,800 --> 00:05:50,250
在整个 SuperPod 里面

162
00:05:50,250 --> 00:05:52,883
每一个 GH200 和每一个 NVSwitch 之上

163
00:05:52,883 --> 00:05:55,133
都有三个 NVLink 进行连接

164
00:05:55,133 --> 00:05:58,283
而每一个 NVSwitch 上面使用了 24 个 Port

165
00:05:58,366 --> 00:06:00,083
那为什么是 24 个 Port

166
00:06:00,083 --> 00:06:01,683
是因为每 24 个 Port

167
00:06:01,683 --> 00:06:03,966
跟 L2 的 NVSwitch 进行相连

168
00:06:03,966 --> 00:06:06,533
相当于每个 NVSwitch 使用 48 个 Port

169
00:06:06,533 --> 00:06:10,250
有 48 个 NVLink 的一个对应的接口

170
00:06:11,283 --> 00:06:13,533
当然这里面的数还是相对比较拗口

171
00:06:13,533 --> 00:06:15,333
大家如果有兴趣也可以停下来

172
00:06:15,333 --> 00:06:17,166
然后慢慢的去数一下到底为什么

173
00:06:17,166 --> 00:06:17,966
需要那么多 Port

174
00:06:17,966 --> 00:06:20,400
然后为什么需要那么多对应的接口

175
00:06:20,400 --> 00:06:23,166
然后才能够实现一个全互联

176
00:06:23,333 --> 00:06:25,166
在整个 NVLink 里面

177
00:06:25,166 --> 00:06:26,883
它其实也有相关的介绍

178
00:06:26,883 --> 00:06:29,250
也就是在综理的上一期视频里面

179
00:06:29,250 --> 00:06:30,333
跟大家讲到

180
00:06:30,333 --> 00:06:32,600
我们现在来在还是深入的去看一下

181
00:06:32,600 --> 00:06:34,800
它的一个整体的 top 的形态

182
00:06:34,800 --> 00:06:35,566
那首先

183
00:06:35,566 --> 00:06:37,766
因为我们的集群组网变大了

184
00:06:37,766 --> 00:06:38,966
所以我们的 NVSwitch

185
00:06:38,966 --> 00:06:40,133
或者我们的 NVLink

186
00:06:40,133 --> 00:06:41,766
就不能只是一层了

187
00:06:41,966 --> 00:06:43,283
不能只是连一个 Rack 了

188
00:06:43,283 --> 00:06:44,566
所以就分成了两层

189
00:06:44,566 --> 00:06:45,166
那这里面

190
00:06:45,166 --> 00:06:47,650
就有了 level1 的一个 NVSwitch

191
00:06:47,650 --> 00:06:49,566
或者 NVLink 相关内容

192
00:06:49,566 --> 00:06:50,800
上面还有一层

193
00:06:50,800 --> 00:06:54,333
也就是 level 2 的一个 NVLink 的 switch

194
00:06:54,333 --> 00:06:55,966
也就 NVL switch 了

195
00:06:55,966 --> 00:06:56,650
那中间

196
00:06:56,650 --> 00:07:00,133
就是英伟达自己的一个的光缆

197
00:07:00,133 --> 00:07:01,483
那在 H100 的时候还

198
00:07:01,483 --> 00:07:02,766
其实还没有用到铜缆

199
00:07:02,766 --> 00:07:03,883
那到底铜缆好不好

200
00:07:03,883 --> 00:07:05,600
其实那是另外一回事了

201
00:07:05,600 --> 00:07:06,683
那在下面

202
00:07:06,683 --> 00:07:09,000
就是真正的 grace hopper 的一个 super

203
00:07:09,166 --> 00:07:11,250
也要真正的计算的节点

204
00:07:11,766 --> 00:07:13,600
在整个 SuperPod 里面

205
00:07:13,600 --> 00:07:14,733
其实刚才讲到了

206
00:07:14,733 --> 00:07:18,800
是由 32 乘以 8 的一个 GH 的一个 SuperChip

207
00:07:18,800 --> 00:07:19,733
来去组成

208
00:07:19,733 --> 00:07:21,000
那这里面的 L1 层

209
00:07:21,000 --> 00:07:23,050
也就是中间的一个小灰灰

210
00:07:23,050 --> 00:07:24,483
就包括了 32 乘以 3

211
00:07:24,483 --> 00:07:27,133
96 个 NVSwitch 的 tray 了

212
00:07:27,133 --> 00:07:31,883
也就是 19 个 NVSwitch 的一个板卡

213
00:07:31,933 --> 00:07:32,566
那 l2

214
00:07:32,566 --> 00:07:35,083
就包括 36 个 NVSwitch 的 Tray

215
00:07:35,083 --> 00:07:37,166
所以我们刚才在这个图里可以看到

216
00:07:37,166 --> 00:07:38,600
这里面有非常大量的通览

217
00:07:38,600 --> 00:07:39,166
还有中间

218
00:07:39,166 --> 00:07:42,733
有非常多的一些相关的 NVSwitch Tray

219
00:07:42,766 --> 00:07:44,366
相关的一些连接

220
00:07:44,366 --> 00:07:45,166
载板

221
00:07:45,733 --> 00:07:46,850
每一个 L1

222
00:07:46,850 --> 00:07:48,650
也就是中间绿色的这一层

223
00:07:48,650 --> 00:07:50,800
有 24 乘以 248 个 Port

224
00:07:50,800 --> 00:07:53,600
跟 L2 的 NVSwitch Tray 进行相连

225
00:07:53,600 --> 00:07:54,933
因此我们一共

226
00:07:54,933 --> 00:07:56,733
需要 96 乘以 48

227
00:07:56,733 --> 00:07:58,200
然后除以 64 除以 2

228
00:07:58,200 --> 00:07:58,933
那一共

229
00:07:58,933 --> 00:08:02,333
就需要 36 个 L2 的 NV Switch 的 tray 了

230
00:08:02,650 --> 00:08:04,650
那这些相关的计算还是蛮有意思

231
00:08:04,650 --> 00:08:07,250
大家也可以重点的去看一看了

232
00:08:07,250 --> 00:08:07,850
那这里面

233
00:08:07,850 --> 00:08:09,250
为了组成一个 Superpod

234
00:08:09,250 --> 00:08:10,933
因为整个 GH 的 Superpod

235
00:08:10,933 --> 00:08:13,200
它是 256 个 GH200

236
00:08:13,200 --> 00:08:17,166
通过两级的 IB 交换机进行一个互联

237
00:08:17,600 --> 00:08:19,050
所以我们这里面可以看到

238
00:08:19,050 --> 00:08:21,250
首先我们分开两个面

239
00:08:21,250 --> 00:08:22,883
一个就是参数面

240
00:08:22,883 --> 00:08:25,333
一个就是所谓的管理面

241
00:08:25,333 --> 00:08:25,766
也好

242
00:08:25,766 --> 00:08:26,733
那参数面

243
00:08:26,733 --> 00:08:28,883
就是我们刚才讲到

244
00:08:28,883 --> 00:08:31,250
计算的节点或者

245
00:08:31,250 --> 00:08:33,650
计算的卡跟我们的互联的卡

246
00:08:33,650 --> 00:08:35,366
然后组成两层

247
00:08:35,366 --> 00:08:37,133
一个内部的主板块

248
00:08:37,133 --> 00:08:38,566
两层的 NVSwitch

249
00:08:38,566 --> 00:08:41,850
为了就是传输我们的网络模型的参数

250
00:08:41,850 --> 00:08:43,400
也是训练的一些网络模型

251
00:08:43,400 --> 00:08:44,933
非常非常多的参数

252
00:08:44,933 --> 00:08:45,683
那这些参数

253
00:08:45,683 --> 00:08:46,933
是不传到 CPU

254
00:08:46,933 --> 00:08:48,650
也不传到外部的接口

255
00:08:48,650 --> 00:08:50,600
也不给你慢慢去调用了

256
00:08:50,600 --> 00:08:53,050
更多的在 GPU 跟 GPU 之间的不断的交互

257
00:08:53,050 --> 00:08:53,800
不断的训练

258
00:08:53,800 --> 00:08:54,600
不断的允许

259
00:08:54,600 --> 00:08:56,533
不断的更新里面的参数

260
00:08:56,533 --> 00:08:58,000
那另外蓝色的这一块

261
00:08:58,000 --> 00:09:00,283
就是对应的一个 IB 了

262
00:09:00,283 --> 00:09:02,083
对应的交换机

263
00:09:02,333 --> 00:09:03,283
那这里面的 IB

264
00:09:03,283 --> 00:09:04,450
是两层组网

265
00:09:04,450 --> 00:09:07,283
一层 IB 和两层 IB 进行一个交互

266
00:09:07,283 --> 00:09:09,400
更多的是连接一些控制的参数

267
00:09:09,400 --> 00:09:11,200
还有我们的一些控制面

268
00:09:11,200 --> 00:09:13,566
还有一些数据面相关的内容

269
00:09:13,566 --> 00:09:14,250
那最后

270
00:09:14,250 --> 00:09:15,050
就连出来

271
00:09:15,050 --> 00:09:18,300
给外部的控制器相关的一些事情了

272
00:09:18,300 --> 00:09:18,966
那下期

273
00:09:18,966 --> 00:09:22,200
我们还会去分享特斯拉建的 10 万卡集群

274
00:09:22,200 --> 00:09:24,366
里面的用的其实不是这种方

275
00:09:24,366 --> 00:09:24,850
这种方

276
00:09:24,850 --> 00:09:28,566
是 GH200 SuperPod 里面去推荐的方式了

277
00:09:29,083 --> 00:09:30,283
下面我们来到了第二个内容

278
00:09:30,283 --> 00:09:33,650
看一下 GB 200 已经 Blackwell 架构了

279
00:09:33,650 --> 00:09:34,533
里面的 NVL

280
00:09:34,533 --> 00:09:35,683
就变成了 72 了

281
00:09:35,683 --> 00:09:38,766
SuperPod 了自然也会成倍的增长

282
00:09:39,083 --> 00:09:39,483
这里面

283
00:09:39,483 --> 00:09:42,483
我们还是要看一下整个 GB200 的 NV72

284
00:09:42,483 --> 00:09:44,050
就右边的一个柜了

285
00:09:44,050 --> 00:09:46,850
就是他们所说的最新的一个概念

286
00:09:46,850 --> 00:09:49,133
就是一个 Rack 一个机柜的形态

287
00:09:49,133 --> 00:09:51,483
那一个 GB200 的 NB 72 Rack

288
00:09:51,483 --> 00:09:53,800
就包含 18 个 GB2 百的 Computer Tray

289
00:09:53,800 --> 00:09:55,766
这里面的 10 18 个 Compute Tray

290
00:09:55,766 --> 00:10:00,050
就有 36 个 brace 的 CPU 和 72 个 GPU

291
00:10:00,133 --> 00:10:01,133
那 72 个

292
00:10:01,133 --> 00:10:02,683
就是 Blackwell 系列的 GPU 了

293
00:10:02,683 --> 00:10:04,850
还有 9 个 NVSwitch 的 tray

294
00:10:04,850 --> 00:10:06,133
那整体的显存

295
00:10:06,133 --> 00:10:07,850
因为刚才有 72 个 GPU

296
00:10:07,850 --> 00:10:12,533
所以显存就是 72*192 b 等于 13.8TB

297
00:10:12,533 --> 00:10:14,366
这是非常夸张

298
00:10:14,366 --> 00:10:16,566
高密度的一个存储系统了

299
00:10:16,566 --> 00:10:17,733
已经变成 CPU 了

300
00:10:17,733 --> 00:10:20,883
对应的一个 fast memory 的 LPDDR5

301
00:10:21,366 --> 00:10:24,450
是对应的 480GB 乘以 36

302
00:10:24,450 --> 00:10:26,333
因为有 36 个 CPU 嘛

303
00:10:26,333 --> 00:10:28,283
所以一共是 17TP

304
00:10:28,366 --> 00:10:30,683
那 17+13 TP 实际上

305
00:10:30,683 --> 00:10:33,533
合起来整体的 fast memory 也有 30TP

306
00:10:33,600 --> 00:10:34,050
非常

307
00:10:34,050 --> 00:10:37,250
非常夸张的一个高密度的存储系统了

308
00:10:37,250 --> 00:10:38,966
它不仅仅是一个计算系统

309
00:10:39,366 --> 00:10:41,733
那刚才其实整个 Compute Tray

310
00:10:41,733 --> 00:10:44,483
就是真正的计算的托盘

311
00:10:44,483 --> 00:10:45,800
那计算托盘的里面

312
00:10:45,800 --> 00:10:47,050
说实话真正买的人

313
00:10:47,050 --> 00:10:47,600
说实话

314
00:10:47,600 --> 00:10:49,483
总比觉得还是非常的少

315
00:10:49,483 --> 00:10:51,650
更多的可能会选择自己组网

316
00:10:51,650 --> 00:10:53,850
还有零碎的或者额外的产品买

317
00:10:53,850 --> 00:10:54,600
我只买 GB 200

318
00:10:54,600 --> 00:10:56,766
 然后我自行的去做一个组网

319
00:10:56,766 --> 00:10:57,966
我自行的去配

320
00:10:57,966 --> 00:10:59,166
然后单机 8 卡

321
00:10:59,166 --> 00:11:00,533
单机 4 卡呀这种

322
00:11:00,533 --> 00:11:02,566
中间换成 AMD 或者英特尔的 CPU

323
00:11:02,566 --> 00:11:04,200
这种形态可能会更多

324
00:11:04,200 --> 00:11:05,200
那现在

325
00:11:05,200 --> 00:11:08,000
GB200 应该还没有对外能够发售

326
00:11:08,000 --> 00:11:09,133
只能说你预定

327
00:11:09,133 --> 00:11:11,283
然后又跳票难产的最近

328
00:11:11,366 --> 00:11:13,483
哎反正做整个集群方案

329
00:11:13,483 --> 00:11:14,333
或者整个 Rack

330
00:11:14,333 --> 00:11:15,333
实际上

331
00:11:15,366 --> 00:11:17,133
还会遇到很多的问题

332
00:11:18,000 --> 00:11:18,366
那现在

333
00:11:18,366 --> 00:11:19,933
我们看一下整个 Compute Tray

334
00:11:19,933 --> 00:11:21,400
也就是我们的计算板卡了

335
00:11:21,400 --> 00:11:22,483
这里面的计算板卡

336
00:11:22,483 --> 00:11:24,333
其实就是基于英伟达的 MGX

337
00:11:24,333 --> 00:11:25,650
来进行一个设计

338
00:11:25,650 --> 00:11:26,250
那整体

339
00:11:26,250 --> 00:11:27,483
为什么要做成一个 tray

340
00:11:27,483 --> 00:11:29,533
是因为整体以前的方式

341
00:11:29,533 --> 00:11:31,483
它其实是一个 1U 2U

342
00:11:31,483 --> 00:11:32,250
基本上

343
00:11:32,250 --> 00:11:34,283
你做一个计算的 tray

344
00:11:34,283 --> 00:11:37,166
以前它会基本上占到 2U 到 4U

345
00:11:37,166 --> 00:11:37,650
那现在

346
00:11:37,650 --> 00:11:39,050
它把它变成为 Compute Tray 了

347
00:11:39,050 --> 00:11:40,166
集成度更高了

348
00:11:40,166 --> 00:11:41,400
它可以做的更薄

349
00:11:41,400 --> 00:11:43,283
计算的密度更加夸张

350
00:11:43,283 --> 00:11:44,883
所以这里面的 MGX 的设计

351
00:11:44,883 --> 00:11:45,850
还是蛮有意思

352
00:11:45,850 --> 00:11:47,600
它做的非常的薄

353
00:11:48,333 --> 00:11:49,000
整一个 Rack

354
00:11:49,000 --> 00:11:51,850
可以塞非常多的一个计算的 tray

355
00:11:51,850 --> 00:11:53,250
和 switch 的 tray

356
00:11:53,283 --> 00:11:54,850
那这里面一个 Compute Tray

357
00:11:54,850 --> 00:11:57,450
包含两个 GB 200

358
00:11:57,450 --> 00:11:59,650
也是对应的两个 Grace 的 CPU

359
00:11:59,650 --> 00:12:02,333
还有四个 Blackwell 的 GPU

360
00:12:02,333 --> 00:12:03,533
一二三四

361
00:12:03,533 --> 00:12:07,933
那整体支持 1.7T 的一个 fast memory

362
00:12:07,933 --> 00:12:11,933
每个代表的显存就是 192 GB 的乘以 4 了

363
00:12:11,933 --> 00:12:13,283
所以整个 Compute Tray

364
00:12:13,283 --> 00:12:15,850
一共就有 768GB

365
00:12:15,850 --> 00:12:18,366
1.7 TB 包含每个额外

366
00:12:18,366 --> 00:12:19,000
刚才跟我们可

367
00:12:19,000 --> 00:12:20,800
我们可以看到这边放大看

368
00:12:20,800 --> 00:12:23,883
它有一排的 LPDDR 的一个芯粒

369
00:12:23,883 --> 00:12:25,050
焊在这里面

370
00:12:25,050 --> 00:12:25,600
所以一共

371
00:12:25,600 --> 00:12:28,200
是 1.7 GB

372
00:12:28,200 --> 00:12:29,850
还是非常夸张的一点

373
00:12:29,850 --> 00:12:33,366
1.7 k 了那了解完整个 Computer Tray 之后

374
00:12:33,366 --> 00:12:35,450
我们现在来看看 switch 的 Tray

375
00:12:35,450 --> 00:12:37,400
也就是我们的互联的托盘

376
00:12:37,400 --> 00:12:38,800
互联托盘也是一样

377
00:12:38,800 --> 00:12:39,733
做成 1U

378
00:12:39,733 --> 00:12:40,933
也就是非常薄

379
00:12:40,933 --> 00:12:42,566
放在我们的整个 Rack

380
00:12:42,566 --> 00:12:44,133
我们整个机柜里面

381
00:12:44,133 --> 00:12:45,083
一个 switch

382
00:12:45,083 --> 00:12:49,850
包含两个 NVL Switch 的一个具体的芯片

383
00:12:49,850 --> 00:12:51,883
那一个 NVSwitch 的芯片里面

384
00:12:51,883 --> 00:12:54,733
有 72 个 NVLink

385
00:12:54,733 --> 00:12:57,333
Pod 了那我们在之前的专门

386
00:12:57,333 --> 00:12:58,200
应该是上一期了

387
00:12:58,200 --> 00:12:59,333
专门讲互联的时候

388
00:12:59,333 --> 00:13:02,533
有讲过里面这款 NVSwitch 的一个芯片

389
00:13:02,533 --> 00:13:04,283
里面的一些组成

390
00:13:04,283 --> 00:13:05,650
紫外线透视图

391
00:13:05,650 --> 00:13:06,200
那这里面

392
00:13:06,200 --> 00:13:08,083
一个 NVSwitch Tray

393
00:13:08,083 --> 00:13:10,283
就包含了 144 个 NVLink 的 Port

394
00:13:10,283 --> 00:13:12,000
那单个 NVSwitch 的芯片

395
00:13:12,000 --> 00:13:13,766
上下刚好有 36Port 嘛

396
00:13:13,766 --> 00:13:15,566
合起来一共有 72

397
00:13:15,566 --> 00:13:16,533
那整体的带宽

398
00:13:16,533 --> 00:13:18,566
是 7.2TB/s

399
00:13:18,566 --> 00:13:19,766
还是非常夸张

400
00:13:19,766 --> 00:13:21,283
在我们的计算里面

401
00:13:21,566 --> 00:13:24,000
或者在我们的一个参数面里面

402
00:13:24,000 --> 00:13:25,883
它用的是大 B

403
00:13:25,883 --> 00:13:26,566
我们之前

404
00:13:26,566 --> 00:13:28,000
专门来强调大 B

405
00:13:28,000 --> 00:13:30,050
小 b 还是要注意

406
00:13:31,166 --> 00:13:32,533
那整体

407
00:13:32,533 --> 00:13:35,283
刚才讲到的一个 Computer Tray

408
00:13:35,283 --> 00:13:37,050
跟我们的计算的 Tray

409
00:13:37,050 --> 00:13:37,733
合起来呀

410
00:13:37,733 --> 00:13:39,533
刚好放在上下上面

411
00:13:39,533 --> 00:13:41,333
是 compute 这个是 switch

412
00:13:41,333 --> 00:13:42,450
这个是 compute

413
00:13:42,450 --> 00:13:42,966
然后

414
00:13:42,966 --> 00:13:46,650
整体组成一个 Rack NVL 的 72 后面

415
00:13:46,650 --> 00:13:49,083
用的是铜缆进行一个互联

416
00:13:49,083 --> 00:13:50,850
那铜缆会比光更好了?

417
00:13:50,850 --> 00:13:51,766
这个不一定

418
00:13:51,766 --> 00:13:52,083
但是

419
00:13:52,083 --> 00:13:54,050
光也会带来他的一个散热的问题

420
00:13:54,050 --> 00:13:55,733
铜了虽然说稳定性问题

421
00:13:55,733 --> 00:13:58,600
但是铜会有很多的相应的机制会出现

422
00:13:58,600 --> 00:14:00,200
那整个 GB 200 的系统

423
00:14:00,200 --> 00:14:01,050
就包含了

424
00:14:01,283 --> 00:14:02,283
2 乘以 18 个

425
00:14:02,283 --> 00:14:03,483
36 个 NVLink

426
00:14:03,483 --> 00:14:04,933
第五代的 Pod 了

427
00:14:04,933 --> 00:14:06,250
那整个对外

428
00:14:06,250 --> 00:14:07,533
其实刚才讲到了

429
00:14:07,533 --> 00:14:10,566
其实是没有提供一个光模块的连接

430
00:14:10,566 --> 00:14:12,050
而是铜线背板

431
00:14:12,250 --> 00:14:13,450
那我们可以看到

432
00:14:13,450 --> 00:14:14,800
这个就刚才的那个图了

433
00:14:14,800 --> 00:14:16,133
一共有很多 u

434
00:14:16,133 --> 00:14:17,766
上面是一个电源

435
00:14:17,766 --> 00:14:20,133
下面也是对应的一些电源

436
00:14:20,166 --> 00:14:21,133
整体的尺寸

437
00:14:21,133 --> 00:14:22,333
也是非常的夸张

438
00:14:22,366 --> 00:14:25,450
而且很重要的就是一个机架呀

439
00:14:25,450 --> 00:14:26,450
或者一个 Rack

440
00:14:26,483 --> 00:14:30,000
它需要一个非常夸张的一个功耗

441
00:14:30,000 --> 00:14:31,766
120KW

442
00:14:32,200 --> 00:14:34,883
那每个机架就包含超过 70KW 了

443
00:14:34,883 --> 00:14:36,366
所以说整体 GB 200

444
00:14:36,366 --> 00:14:38,200
它需要进行一个液冷

445
00:14:38,200 --> 00:14:39,250
那液冷的走线

446
00:14:39,250 --> 00:14:42,133
其实在这里面的鼠标的这个位置

447
00:14:42,133 --> 00:14:42,966
那这意味着

448
00:14:42,966 --> 00:14:45,600
我们的 IDC 的一个具体的机房

449
00:14:45,600 --> 00:14:47,050
需要大量的去改造

450
00:14:47,533 --> 00:14:50,600
提供非常夸张的一个能源供给

451
00:14:50,600 --> 00:14:51,333
所以说

452
00:14:51,333 --> 00:14:53,850
整个 GB200 SuperPod

453
00:14:53,850 --> 00:14:54,800
他的一个 Pod

454
00:14:54,800 --> 00:14:56,566
是一个能源怪兽

455
00:15:00,166 --> 00:15:01,800
在真正的形态里面

456
00:15:01,800 --> 00:15:03,766
其实英伟达还提供了另外一种

457
00:15:03,766 --> 00:15:06,000
就是 GB200 的 NVL36

458
00:15:06,000 --> 00:15:08,850
36 这个他另外提供的形态

459
00:15:08,850 --> 00:15:09,566
因为说实话

460
00:15:09,566 --> 00:15:10,883
你要每个机房都这么

461
00:15:10,883 --> 00:15:12,883
因为你的产品引进而改造

462
00:15:12,883 --> 00:15:14,966
其实不太合理

463
00:15:14,966 --> 00:15:16,566
那很多的厂房

464
00:15:16,566 --> 00:15:18,083
那确实很消耗

465
00:15:18,083 --> 00:15:19,733
如果我以前已经买了 H100

466
00:15:19,733 --> 00:15:20,800
然后我现在

467
00:15:21,000 --> 00:15:22,333
机房还有些空余的地方

468
00:15:22,333 --> 00:15:25,566
我肯定想把 GB200 也塞到同一个机房嘛

469
00:15:25,566 --> 00:15:27,483
所以因为它又推出了一个新

470
00:15:27,483 --> 00:15:28,250
对应的产品形态

471
00:15:28,250 --> 00:15:29,600
叫做 NVL36 了

472
00:15:29,600 --> 00:15:30,800
当然了它后面

473
00:15:30,800 --> 00:15:33,050
为了解禁中美的关系

474
00:15:33,050 --> 00:15:35,333
它其实又推出了很多相关

475
00:15:35,333 --> 00:15:36,400
博弈性的产品

476
00:15:36,400 --> 00:15:38,766
或者做了很多产品组合

477
00:15:38,800 --> 00:15:40,000
那其实 ZOMI 后面还

478
00:15:40,000 --> 00:15:41,766
是会想分享一下

479
00:15:41,766 --> 00:15:43,733
Cerebras 就是一个晶圆体

480
00:15:43,766 --> 00:15:45,883
做成一个大的近存计算

481
00:15:45,883 --> 00:15:48,600
那跟这里面的 GB 200 有什么优缺点

482
00:15:48,600 --> 00:15:49,400
对比起来

483
00:15:49,450 --> 00:15:52,366
ZOMI 后面还会去分享新相关新的知识

484
00:15:52,883 --> 00:15:53,966
因为怎么说

485
00:15:54,133 --> 00:15:55,533
分享新的知识过程当中

486
00:15:55,533 --> 00:15:57,166
也是我学习的过程嘛

487
00:15:57,166 --> 00:15:59,083
所以我觉得还蛮有意思

488
00:16:11,766 --> 00:16:14,800
那在整个 NVL36 里面

489
00:16:14,800 --> 00:16:16,533
又拆成两个机架了

490
00:16:16,533 --> 00:16:17,450
或两个 Rack 了

491
00:16:17,450 --> 00:16:18,450
一个 Rack a

492
00:16:18,450 --> 00:16:20,366
另外一个就是 Rack b

493
00:16:20,366 --> 00:16:21,933
在两个机架之间

494
00:16:21,933 --> 00:16:25,850
保持用 NVL72 里面所有的一个

495
00:16:25,850 --> 00:16:26,683
GPU 的连接

496
00:16:26,683 --> 00:16:27,450
保存保持

497
00:16:27,450 --> 00:16:29,133
我们整个机里面

498
00:16:29,133 --> 00:16:29,966
一共有 72

499
00:16:29,966 --> 00:16:31,650
左边 36 右边 36

500
00:16:31,650 --> 00:16:33,533
所以一共有 72 个 GPU 之间

501
00:16:33,733 --> 00:16:35,450
无阻塞的全互联

502
00:16:35,450 --> 00:16:37,483
也就 full mesh 的一个互联的形态了

503
00:16:37,483 --> 00:16:39,200
那每个计算托盘的高度

504
00:16:39,200 --> 00:16:40,483
就跟刚才不一样了

505
00:16:40,483 --> 00:16:41,400
刚才的 Computer Tray

506
00:16:41,400 --> 00:16:42,850
是它是一个 1U

507
00:16:42,850 --> 00:16:44,000
现在一个 Compute Tray

508
00:16:44,000 --> 00:16:45,000
就变成 2U

509
00:16:45,000 --> 00:16:45,966
也就是高了

510
00:16:46,400 --> 00:16:47,566
宽了一点点

511
00:16:47,650 --> 00:16:50,166
这样的话刚好放满我们整个机架

512
00:16:50,166 --> 00:16:50,600
然后

513
00:16:50,600 --> 00:16:53,366
也利于我们做一个风冷的散热

514
00:16:53,366 --> 00:16:54,683
而不一定要液冷

515
00:16:54,683 --> 00:16:56,400
这样液冷其实效果更好

516
00:16:56,400 --> 00:16:57,766
但是它需要对机房了

517
00:16:57,766 --> 00:16:59,850
进行一个比较大量的改造

518
00:17:00,200 --> 00:17:01,883
那在这里面

519
00:17:01,883 --> 00:17:03,366
这里面是官方的预测

520
00:17:03,366 --> 00:17:06,283
或者那个 SEMI Analysis 的预测

521
00:17:06,283 --> 00:17:07,800
2025 年的第二季度

522
00:17:07,800 --> 00:17:11,000
就会推出 B200 的一个 NVL72

523
00:17:11,000 --> 00:17:15,166
NVL32 乘以 36 乘以 2 的一个规格

524
00:17:15,166 --> 00:17:16,600
采用的是 X86 的 CPU

525
00:17:16,600 --> 00:17:17,650
而不是英伟达

526
00:17:17,650 --> 00:17:19,366
所以为什么要做成两 u

527
00:17:19,366 --> 00:17:20,883
因为它变成一个可插拔式

528
00:17:20,883 --> 00:17:22,200
这种方式

529
00:17:22,283 --> 00:17:23,283
每个计算托盘

530
00:17:23,283 --> 00:17:24,933
其实跟 GB200 一样

531
00:17:24,933 --> 00:17:27,250
两个 CPU 加四个 GPU

532
00:17:27,283 --> 00:17:28,966
因为整个 GPU 里面

533
00:17:28,966 --> 00:17:30,683
它的功耗已经非常的高了

534
00:17:30,683 --> 00:17:33,000
而且它的计算密度已经非常的强了

535
00:17:33,000 --> 00:17:35,766
里面其实是两 Die 进行合封

536
00:17:36,533 --> 00:17:37,450
这里面的 ZOMI

537
00:17:37,450 --> 00:17:40,133
还是想跟大家引起一个思考

538
00:17:40,483 --> 00:17:44,166
首先在 H100 系列的时候

539
00:17:44,166 --> 00:17:46,933
大家去预测光模块的需求会增长了

540
00:17:46,933 --> 00:17:48,966
因为随着我们的万卡集群

541
00:17:48,966 --> 00:17:51,000
还有 10 万卡集群的组网

542
00:17:51,450 --> 00:17:53,166
不过到了 B200

543
00:17:53,166 --> 00:17:54,933
也就是今年 25 年

544
00:17:54,933 --> 00:17:57,366
24 年了现在还是 24 年的 3 月份

545
00:17:57,366 --> 00:17:59,600
B200 刚推出的时候和刚发布的时候

546
00:17:59,600 --> 00:18:01,850
大家就突然去炒铜了

547
00:18:01,850 --> 00:18:04,200
那去预测后面的光模块的需求

548
00:18:04,200 --> 00:18:05,933
是急剧的下降

549
00:18:05,933 --> 00:18:07,166
所以当时的铜价

550
00:18:07,166 --> 00:18:08,400
因为因为英伟达炒起来了

551
00:18:08,400 --> 00:18:10,366
ZOMI 觉得也是非常的神奇

552
00:18:10,366 --> 00:18:11,083
反正我不炒股

553
00:18:11,083 --> 00:18:12,333
我看不懂

554
00:18:12,333 --> 00:18:13,683
我只做技术的分析

555
00:18:13,733 --> 00:18:14,766
那这里面

556
00:18:14,800 --> 00:18:16,566
在整个 B200

557
00:18:16,566 --> 00:18:18,533
因为有类似大型机的交互

558
00:18:18,533 --> 00:18:21,133
后面选择铜互联

559
00:18:21,966 --> 00:18:23,966
大家会怎么看待这个问题

560
00:18:24,000 --> 00:18:27,083
到底未来是光模块的需求更多

561
00:18:27,083 --> 00:18:29,483
还是光模块的需求慢慢的减少

562
00:18:29,533 --> 00:18:32,766
反而铜互联的需求会上来了

563
00:18:32,766 --> 00:18:34,483
大家怎么看待这个问题

564
00:18:34,600 --> 00:18:36,933
留给大家去思考了

565
00:18:38,083 --> 00:18:39,450
那另外两个问题

566
00:18:39,450 --> 00:18:40,883
就是对

567
00:18:40,883 --> 00:18:42,933
这里面就是我的一些相关的思考了

568
00:18:42,933 --> 00:18:43,933
我都忘了这个 PPT

569
00:18:43,933 --> 00:18:46,083
应该之前写了蛮久的了

570
00:18:46,250 --> 00:18:46,733
那首先

571
00:18:46,733 --> 00:18:48,566
我们还是要每一代架构的演进

572
00:18:48,566 --> 00:18:49,600
去看首先

573
00:18:49,600 --> 00:18:50,250
hopper 架构

574
00:18:50,250 --> 00:18:51,533
也就是 H 系列

575
00:18:51,533 --> 00:18:54,483
它使用的是一个松耦合的连接的方式

576
00:18:54,483 --> 00:18:56,200
所以整体机柜的三个和部署

577
00:18:56,200 --> 00:18:57,400
会相对的灵活

578
00:18:57,400 --> 00:18:59,483
因此特斯拉用 H 系列

579
00:18:59,483 --> 00:19:00,933
组成了一个 10 万卡的集群

580
00:19:00,933 --> 00:19:02,450
我们会在下一个视频

581
00:19:02,450 --> 00:19:03,733
跟大家去分享

582
00:19:03,733 --> 00:19:04,850
但是 B200

583
00:19:04,850 --> 00:19:06,600
采用的是一个 Rack 的形态呀

584
00:19:06,600 --> 00:19:08,050
所以为什么 B200 之后

585
00:19:08,050 --> 00:19:09,650
它其实有新的名词

586
00:19:09,650 --> 00:19:11,566
一个 tray 却还有一个 Rack 的方式

587
00:19:11,566 --> 00:19:12,533
就是因为它采用

588
00:19:12,533 --> 00:19:15,083
像以前大型机的交付的方式

589
00:19:15,083 --> 00:19:16,166
那所以大型机

590
00:19:16,166 --> 00:19:17,933
我不知道搞计算机的人

591
00:19:17,933 --> 00:19:19,766
看过人月神话没有

592
00:19:19,850 --> 00:19:21,200
IBM 以前就专门采用

593
00:19:21,200 --> 00:19:22,600
大型机的交互方式

594
00:19:22,600 --> 00:19:23,533
而铜互联

595
00:19:23,533 --> 00:19:25,400
是有效降低整体的功耗

596
00:19:25,400 --> 00:19:27,200
和增加节点内的稳定性

597
00:19:27,200 --> 00:19:29,083
所以他反而采用铜互联

598
00:19:29,083 --> 00:19:31,333
那到底哪个才是未来主流

599
00:19:31,333 --> 00:19:32,883
我觉得大家也可以看一下

600
00:19:32,883 --> 00:19:36,766
到底未来以哪一种方式去组网

601
00:19:36,766 --> 00:19:40,650
或者大家更倾向于哪种方式去下单

602
00:19:40,733 --> 00:19:43,733
或者对于长期的我的业务

603
00:19:43,800 --> 00:19:45,600
更有利发展的方向了

604
00:19:46,600 --> 00:19:49,566
后面这里面还有一些简单的参数了

605
00:19:49,566 --> 00:19:51,366
就 GB200 NVL72

606
00:19:51,366 --> 00:19:53,533
还有相关的 SuperChip

607
00:19:53,566 --> 00:19:56,333
单一块芯片里面相关的一些参数

608
00:19:56,333 --> 00:19:57,800
这里面就不一一介绍了

609
00:19:58,000 --> 00:19:59,450
那整体来看

610
00:19:59,566 --> 00:20:01,800
整个 NVL72 的互联的拓扑

611
00:20:01,800 --> 00:20:03,800
跟刚才的 H100

612
00:20:03,800 --> 00:20:05,333
其实比较相似

613
00:20:05,333 --> 00:20:06,283
每一个 B200

614
00:20:06,283 --> 00:20:07,683
就是我们下面看到

615
00:20:07,683 --> 00:20:09,133
里面有 Computer Tray

616
00:20:09,133 --> 00:20:10,250
还有 Switch Tray

617
00:20:10,400 --> 00:20:13,400
它同样的进行实现一个全互联

618
00:20:13,400 --> 00:20:15,850
那每个 B200 里面

619
00:20:15,850 --> 00:20:17,000
也就每一颗

620
00:20:17,000 --> 00:20:19,283
它一共有 18 个 NVLink Port

621
00:20:19,283 --> 00:20:20,450
有 18 个 link Port

622
00:20:20,450 --> 00:20:22,850
就刚好对应 9 个 Switch Tray

623
00:20:22,850 --> 00:20:23,883
因为每个 Switch Tray

624
00:20:23,883 --> 00:20:26,333
有两个 NVSwitch

625
00:20:26,333 --> 00:20:29,083
这样的我们才能实现每一个卡

626
00:20:29,566 --> 00:20:30,566
就每一个 GPU

627
00:20:30,566 --> 00:20:31,800
跟另外一个 GPU

628
00:20:31,800 --> 00:20:34,800
实现通过 NVSwitch 实现一个全互联

629
00:20:34,800 --> 00:20:36,483
而 Switch 上

630
00:20:36,483 --> 00:20:38,800
一共有 72 个 Port

631
00:20:38,800 --> 00:20:40,766
刚好构成 NVL72 了

632
00:20:40,766 --> 00:20:42,800
因为刚才从芯片里面

633
00:20:42,800 --> 00:20:44,083
上面 32 个 Port

634
00:20:44,083 --> 00:20:45,050
下面 32 个 Port

635
00:20:45,050 --> 00:20:47,600
也就 32 个乘以 2

636
00:20:47,883 --> 00:20:50,533
里面的 NVL 的一个连接口

637
00:20:50,566 --> 00:20:51,283
那整体

638
00:20:51,283 --> 00:20:55,000
我们就把 72 乘以 B200 的整体的芯片

639
00:20:55,000 --> 00:20:58,133
通过这种组网的方式全互联起来

640
00:20:58,133 --> 00:20:59,533
这个就是整个

641
00:20:59,600 --> 00:21:02,283
现在大家都非常享用相关的算力

642
00:21:02,283 --> 00:21:03,533
包括搞研究的人

643
00:21:03,533 --> 00:21:04,600
那 ZOMI 是搞研究

644
00:21:04,600 --> 00:21:07,333
说实话我自己只有一个 4080

645
00:21:07,333 --> 00:21:08,200
非常的 low

646
00:21:13,450 --> 00:21:14,083
那接下来

647
00:21:14,083 --> 00:21:15,200
我们还是要思考一个问题

648
00:21:15,200 --> 00:21:17,450
就是在 NVL72 的机柜里面

649
00:21:17,450 --> 00:21:18,450
我们现在看到

650
00:21:18,450 --> 00:21:20,200
所有的 NVSwitch 的交换机

651
00:21:20,200 --> 00:21:23,133
已经没有额外的接口给互联了

652
00:21:23,133 --> 00:21:25,883
然后构成更大的两层的交换组网了

653
00:21:25,933 --> 00:21:29,250
那 NVL576 也就是 72 乘以 8

654
00:21:29,250 --> 00:21:31,800
是怎么把 8 跟 NVL72 连接起来

655
00:21:31,883 --> 00:21:32,483
蛮有意思

656
00:21:32,483 --> 00:21:33,933
我们现在来看到这里面

657
00:21:33,933 --> 00:21:36,600
NVL72 都已经用完所有的接口了

658
00:21:36,650 --> 00:21:38,533
怎么做更大组网的互联

659
00:21:38,533 --> 00:21:41,133
难道通过 CPU 的 IB 网络做吗

660
00:21:41,400 --> 00:21:43,133
那英伟达它肯定不是这样

661
00:21:43,250 --> 00:21:45,450
所以我们接下来再看一下

662
00:21:45,450 --> 00:21:47,366
整个 NVL 的 SuperPod

663
00:21:47,366 --> 00:21:48,850
是怎么去实现

664
00:21:48,883 --> 00:21:50,533
那这里面的 SuperPod

665
00:21:50,533 --> 00:21:52,400
它实际上是 scale out

666
00:21:52,400 --> 00:21:53,450
是通过 RDMA

667
00:21:53,450 --> 00:21:56,133
而不是通过 scale up 的 NVLink 进行互联

668
00:21:56,133 --> 00:21:58,650
那跟上一代的 256 的一个 GH

669
00:21:58,650 --> 00:21:59,483
200 全互联

670
00:21:59,483 --> 00:22:00,933
实现了是类似

671
00:22:00,933 --> 00:22:04,533
它提供了两级的 NVSwitch 的 tray

672
00:22:04,533 --> 00:22:05,250
那这里面

673
00:22:05,250 --> 00:22:07,000
有 L1 啦有 L2 啦

674
00:22:07,000 --> 00:22:08,533
两级了然后

675
00:22:08,533 --> 00:22:11,566
一半的 Port 连接到 576 个 Blackwell GPU

676
00:22:11,566 --> 00:22:12,283
那这个时候

677
00:22:12,283 --> 00:22:13,800
我们就要需要去计算

678
00:22:13,800 --> 00:22:16,283
一共有多少个 switch 的 tray 了

679
00:22:16,283 --> 00:22:17,800
同样的 L2 的时候

680
00:22:17,800 --> 00:22:19,333
我们也需要去实现

681
00:22:19,533 --> 00:22:21,000
去计算有多少个 Switch Tray

682
00:22:21,000 --> 00:22:22,366
就看我们怎么去组网了

683
00:22:22,366 --> 00:22:24,250
那这里面还是蛮有意思

684
00:22:24,250 --> 00:22:25,283
我们看一下这个图

685
00:22:25,283 --> 00:22:27,850
是它的一个官方的渲染图

686
00:22:27,850 --> 00:22:29,366
那这里面我们可以看到

687
00:22:29,366 --> 00:22:30,766
中间的这一排

688
00:22:30,766 --> 00:22:32,133
就这里面的这一排

689
00:22:32,133 --> 00:22:32,650
这里面

690
00:22:32,650 --> 00:22:35,000
是 FX8 的一个具体的网卡

691
00:22:35,000 --> 00:22:36,766
和对应的交换器

692
00:22:36,966 --> 00:22:38,083
中间的这一坨

693
00:22:38,083 --> 00:22:40,850
就是对应的 GB 200 的计算的节点

694
00:22:40,850 --> 00:22:43,683
而这里面有两层的一个交换

695
00:22:43,683 --> 00:22:44,483
第一层的交换

696
00:22:44,483 --> 00:22:47,200
就是中间的这一坨 L1 的 switchTray

697
00:22:47,200 --> 00:22:47,650
另外的话

698
00:22:47,650 --> 00:22:48,200
在后面

699
00:22:48,200 --> 00:22:51,683
还是有另外一层 NVL switch 的 Tray 的交换

700
00:22:51,683 --> 00:22:52,333
所以说

701
00:22:52,333 --> 00:22:53,733
它一共实现两层

702
00:22:53,733 --> 00:22:54,250
那具体

703
00:22:54,250 --> 00:22:56,650
我们可以看一下这么一个拓扑图

704
00:22:56,650 --> 00:22:59,366
看这个拓扑图可能会更加的好

705
00:22:59,366 --> 00:23:03,400
那为了去扩展到 576 卡的一个超节点

706
00:23:03,400 --> 00:23:04,250
也就是 SuperPod

707
00:23:04,250 --> 00:23:05,850
这里面是一个 Rack

708
00:23:05,850 --> 00:23:07,600
也就是一个机柜

709
00:23:07,600 --> 00:23:10,200
一个机柜里面有 18 个计算的 Tray

710
00:23:10,200 --> 00:23:12,800
然后有九个 Switch Tray

711
00:23:12,800 --> 00:23:15,883
也就是我们对应的一个计算的托盘

712
00:23:15,883 --> 00:23:17,483
和互联的托盘

713
00:23:17,483 --> 00:23:18,366
每个交换机

714
00:23:18,366 --> 00:23:22,083
都提供 36 个对外互联的 Uplink 了

715
00:23:22,083 --> 00:23:24,566
那所以我们累积单个机柜

716
00:23:24,566 --> 00:23:29,450
有 36 乘以 2 乘以 9=648 个上行的接口

717
00:23:29,450 --> 00:23:31,450
整体构成 NVL576

718
00:23:31,450 --> 00:23:34,083
所以我们需要 16 个机柜

719
00:23:34,083 --> 00:23:36,133
从零一到 16

720
00:23:36,133 --> 00:23:38,050
那一共有 16 个机位

721
00:23:38,050 --> 00:23:39,333
累计上行的端口

722
00:23:39,333 --> 00:23:41,083
就变成了所谓的上行端口

723
00:23:41,083 --> 00:23:44,800
就是上行连接到上面 L2 的 Switch Tray

724
00:23:44,800 --> 00:23:46,283
就是我们的互联的接口

725
00:23:46,283 --> 00:23:48,166
或者互联的板卡

726
00:23:48,166 --> 00:23:50,133
一共是 648

727
00:23:50,400 --> 00:23:53,533
下面是 648 乘以 16

728
00:23:53,566 --> 00:23:57,800
一共是 1 万 368 个

729
00:23:57,883 --> 00:24:00,733
这样去构成两层的平面

730
00:24:00,733 --> 00:24:03,000
而每个平面又有 36 个子平面

731
00:24:03,000 --> 00:24:04,850
由 18 个 Switch 来组成

732
00:24:04,850 --> 00:24:06,766
所以说整体的互联的形态

733
00:24:06,766 --> 00:24:07,450
越来越多

734
00:24:07,450 --> 00:24:09,683
为什么我们现在讲着讲着不了芯片

735
00:24:09,683 --> 00:24:10,933
或者芯片的东西

736
00:24:11,133 --> 00:24:11,883
讲的越来越少

737
00:24:11,883 --> 00:24:14,366
或者在整体的英伟达里面

738
00:24:14,400 --> 00:24:16,933
更多的是提供一个解决方案

739
00:24:16,933 --> 00:24:18,600
或者一个大规模

740
00:24:18,600 --> 00:24:20,450
一个叫做什么大型机的交付

741
00:24:20,450 --> 00:24:23,450
是因为它需要变成一个非常夸张

742
00:24:23,450 --> 00:24:25,566
解决方案的形态

743
00:24:25,566 --> 00:24:26,400
对外去销售

744
00:24:26,400 --> 00:24:27,000
而这个时候

745
00:24:27,000 --> 00:24:28,883
以前传统的光的人

746
00:24:28,883 --> 00:24:30,483
或者说说网络的人

747
00:24:30,483 --> 00:24:33,050
也就迎来了新的增长点

748
00:24:33,050 --> 00:24:35,883
或者他们新的知识用到的时候了

749
00:24:36,600 --> 00:24:37,133
在这里面

750
00:24:37,133 --> 00:24:39,283
小新就会有一个问题了哎

751
00:24:39,333 --> 00:24:41,483
从下一代的大模型的顺利

752
00:24:41,483 --> 00:24:42,883
本身的需求来看

753
00:24:42,933 --> 00:24:43,450
超接点

754
00:24:43,450 --> 00:24:46,483
现在已经是一个高带宽的一个领域了

755
00:24:46,483 --> 00:24:48,050
就是 High Bandwidth Domain 都没了

756
00:24:48,050 --> 00:24:49,483
那当 scale up 的时候

757
00:24:49,483 --> 00:24:52,050
也就是我的 NVLink 的网络规模增大

758
00:24:52,400 --> 00:24:52,966
实际上

759
00:24:52,966 --> 00:24:54,683
高带宽之间互联

760
00:24:54,683 --> 00:24:57,000
跟 RDMA 带宽之间的性能的收益

761
00:24:57,000 --> 00:24:58,366
是在减少

762
00:24:58,400 --> 00:25:00,683
所以整体的 SuperPod 的需求量

763
00:25:00,766 --> 00:25:02,600
到底多大合适

764
00:25:02,600 --> 00:25:03,850
会不会迎来思科

765
00:25:03,850 --> 00:25:04,733
时刻

766
00:25:05,450 --> 00:25:07,166
这个问题还是蛮有意思

767
00:25:07,166 --> 00:25:08,766
不知道大家看懂没看懂

768
00:25:08,766 --> 00:25:10,566
ZOMI 简单的说一些人话

769
00:25:10,566 --> 00:25:11,733
现在我们来看到

770
00:25:11,733 --> 00:25:14,766
你看到整个英伟达的 GPU 的芯片

771
00:25:14,766 --> 00:25:16,533
说实话它的一个

772
00:25:16,600 --> 00:25:18,933
晶体管的制成工艺的受限

773
00:25:18,933 --> 00:25:21,400
现在都开始往大规模的组网去做了

774
00:25:21,400 --> 00:25:22,483
那大规模的组网

775
00:25:22,483 --> 00:25:26,050
其实为的就是提供我们更高的带宽

776
00:25:26,050 --> 00:25:27,650
那带宽增加之后

777
00:25:27,650 --> 00:25:29,483
会发现整体的芯片的性能

778
00:25:29,483 --> 00:25:30,883
其实没有成倍的提升

779
00:25:31,000 --> 00:25:33,850
可能是互联的带宽有了成倍的增加

780
00:25:33,850 --> 00:25:34,333
但是

781
00:25:34,333 --> 00:25:36,283
根据我们的 roofline 的一个定理

782
00:25:36,283 --> 00:25:37,800
也就是我们的计算节点

783
00:25:37,800 --> 00:25:39,650
跟我们的一个互联的节点

784
00:25:39,650 --> 00:25:41,566
他找到这个最优的点

785
00:25:41,566 --> 00:25:42,400
我们才能够说

786
00:25:42,400 --> 00:25:45,566
充分的发挥整个集群的一个性能

787
00:25:45,566 --> 00:25:47,400
那我们为了达到这个点

788
00:25:47,400 --> 00:25:49,400
我们的带宽跟我们的计算的配比

789
00:25:49,400 --> 00:25:50,250
应该怎么样

790
00:25:50,250 --> 00:25:52,766
整体的 SuperPod 需求量应该有多大

791
00:25:52,766 --> 00:25:55,050
是否不不断的去追求网络带宽

792
00:25:55,050 --> 00:25:56,000
不断的增加

793
00:25:56,000 --> 00:25:57,000
是一个好事

794
00:25:57,000 --> 00:25:58,366
还是不是一个好事

795
00:25:58,366 --> 00:25:59,483
具体的 SuperPod

796
00:25:59,483 --> 00:26:01,800
需求量到底多大为合理

797
00:26:01,800 --> 00:26:04,400
这个内容留给大家去思考

798
00:26:07,283 --> 00:26:08,883
现在我们来到了最后一个内容了

799
00:26:08,883 --> 00:26:10,533
就是小节与思考

800
00:26:10,533 --> 00:26:12,766
整个看一下 NVLink 的分析

801
00:26:12,800 --> 00:26:14,283
首先我们看到

802
00:26:14,283 --> 00:26:16,400
整个制造工艺的性能的提升了

803
00:26:16,400 --> 00:26:19,083
其实已经变得非常的有限

804
00:26:19,083 --> 00:26:21,366
左边的是 H 系列 hopper

805
00:26:21,450 --> 00:26:23,000
右边的是 Blackwell 系列

806
00:26:23,050 --> 00:26:25,133
虽然我们现在放的图了差不多大

807
00:26:25,133 --> 00:26:25,766
但实际上

808
00:26:25,766 --> 00:26:26,250
这个图

809
00:26:26,250 --> 00:26:28,766
左边这个要比右边的要小一倍

810
00:26:28,766 --> 00:26:30,000
单带的 GPU 的性能

811
00:26:30,000 --> 00:26:32,050
也会发现没有太大的提升了

812
00:26:32,050 --> 00:26:33,966
所以我们看到 NVLink

813
00:26:33,966 --> 00:26:36,883
或者整个 NV 里面的代替

814
00:26:36,883 --> 00:26:40,366
受到先进的工艺制成了约束了

815
00:26:40,400 --> 00:26:41,766
先进的工艺的代际之间

816
00:26:41,766 --> 00:26:43,166
而且还是很长

817
00:26:43,166 --> 00:26:44,533
所以我觉得 ZOMI 觉得

818
00:26:44,533 --> 00:26:47,733
国内还是有望去超越

819
00:26:47,733 --> 00:26:50,366
如果我们维持在相同的纳米里面

820
00:26:50,366 --> 00:26:51,650
我们可以做多 Die

821
00:26:51,650 --> 00:26:52,450
封装

822
00:26:52,650 --> 00:26:55,366
那我们可以做很多其他的事情了

823
00:26:55,366 --> 00:26:57,366
不过确实整体现在最近

824
00:26:57,366 --> 00:26:58,483
HBM 又受限了

825
00:26:58,483 --> 00:27:01,000
就上面的这些 HBM 就受限了

826
00:27:01,000 --> 00:27:01,966
不能供给了

827
00:27:01,966 --> 00:27:02,933
所以可能

828
00:27:03,166 --> 00:27:06,683
国内又会出现新的一些架构涌现

829
00:27:06,683 --> 00:27:08,083
那代际之间的芯片

830
00:27:08,083 --> 00:27:10,000
我们会发现从 4 纳米

831
00:27:10,000 --> 00:27:11,366
从 5 纳米到 4 纳米

832
00:27:11,366 --> 00:27:14,050
它的提升可能并不是非常的多

833
00:27:14,050 --> 00:27:15,800
但是功耗的提升

834
00:27:15,800 --> 00:27:17,683
还是还是有一点

835
00:27:17,683 --> 00:27:19,566
因为自从纳米上去了嘛

836
00:27:19,566 --> 00:27:20,333
那另外的话

837
00:27:20,333 --> 00:27:23,366
我们看一下整体的封装的能力

838
00:27:23,400 --> 00:27:25,600
我们用多 die 的封装

839
00:27:25,600 --> 00:27:28,166
去解决工艺提升慢的问题

840
00:27:28,166 --> 00:27:31,250
这里面从 B200 Blackwell 里面看到

841
00:27:31,333 --> 00:27:33,000
左边的是一个 Die

842
00:27:33,050 --> 00:27:34,333
右边的是一个 Die

843
00:27:34,333 --> 00:27:37,333
两个芯粒进行一个和封并起来

844
00:27:37,333 --> 00:27:38,050
那这个时候

845
00:27:38,050 --> 00:27:39,650
我们从单 die 的封装了

846
00:27:39,650 --> 00:27:41,083
引进到双 die 的封装

847
00:27:41,083 --> 00:27:42,400
未来的可能是四 die

848
00:27:42,400 --> 00:27:45,000
甚至八 die 的一个具体的封装了

849
00:27:45,200 --> 00:27:47,766
通过这种方式去解决芯片的性能

850
00:27:47,766 --> 00:27:48,366
另外的话

851
00:27:48,366 --> 00:27:50,000
所谓的封装

852
00:27:50,000 --> 00:27:52,600
你们可以看到 HBM 也会实现

853
00:27:52,600 --> 00:27:55,650
多大的封装解决内存墙的问题

854
00:27:55,650 --> 00:27:57,683
所以现在多 die 的封装

855
00:27:57,683 --> 00:27:59,000
其实实际上

856
00:27:59,000 --> 00:28:02,000
是帮助我们工艺的提升

857
00:28:03,083 --> 00:28:04,333
另外的话我们第三个点

858
00:28:04,333 --> 00:28:06,883
就是在整个 Blackwell 系列里面

859
00:28:06,883 --> 00:28:08,800
新的引入 tray 板卡的概念

860
00:28:08,800 --> 00:28:11,533
包括 H100 其实已经渐渐的涌引入了

861
00:28:11,533 --> 00:28:13,933
但是购买的人相对来说比较少

862
00:28:13,933 --> 00:28:15,133
但是 B 系列里面

863
00:28:15,133 --> 00:28:16,883
真正的把 Tray 这个概念

864
00:28:16,883 --> 00:28:18,933
其实是强化了非常多

865
00:28:18,933 --> 00:28:21,483
也就是对应的整个托盘

866
00:28:21,683 --> 00:28:22,733
因为整个英伟达

867
00:28:22,733 --> 00:28:25,333
不仅使用封装来解决部件的瓶颈

868
00:28:25,333 --> 00:28:26,483
性能也使用了

869
00:28:26,483 --> 00:28:28,000
整个集合方案

870
00:28:28,000 --> 00:28:29,650
也是也是用了一个板卡

871
00:28:29,650 --> 00:28:31,166
所谓的 Tray 的概念

872
00:28:31,166 --> 00:28:32,166
那整个 hopper

873
00:28:32,166 --> 00:28:33,683
就是支持

874
00:28:33,683 --> 00:28:35,050
还是 hopper 比较初代

875
00:28:35,050 --> 00:28:36,650
所以它自己一个 GPU 加一个

876
00:28:36,966 --> 00:28:38,733
一个 CPU 加一个 GPU 这种方式

877
00:28:38,733 --> 00:28:40,000
说实话购买的人很少

878
00:28:40,000 --> 00:28:42,250
因为它的一个算密集度不够高

879
00:28:42,250 --> 00:28:43,483
那 Blackwell 系列里面

880
00:28:43,483 --> 00:28:46,566
就真正支持了一个 CPU 加两个 GPU

881
00:28:46,566 --> 00:28:47,366
这种方式

882
00:28:47,366 --> 00:28:50,400
所以同等制造工艺下面的性能

883
00:28:50,400 --> 00:28:52,483
对比起 h hopper 架构的时候

884
00:28:52,483 --> 00:28:53,650
提升了四倍

885
00:28:53,650 --> 00:28:56,283
然后整体的 Die 了多 Die 也进行封装

886
00:28:56,283 --> 00:28:58,283
所以我们引入了 Tray 的功能

887
00:28:58,366 --> 00:29:01,333
有进一步的把我们整个计算的密度

888
00:29:01,333 --> 00:29:02,133
增加

889
00:29:02,650 --> 00:29:03,600
那第四个分析点

890
00:29:03,600 --> 00:29:05,733
就是网络带宽的提升

891
00:29:05,733 --> 00:29:06,850
这里面还蛮有意思

892
00:29:06,850 --> 00:29:08,733
整个 NVLink 的交换机的端口数

893
00:29:08,733 --> 00:29:10,366
和单端口的数量

894
00:29:10,400 --> 00:29:12,650
都比上一代翻了一倍

895
00:29:12,650 --> 00:29:14,683
为提供更大规模的 NV

896
00:29:14,683 --> 00:29:16,850
另给的组网来提供了很好的支撑

897
00:29:16,850 --> 00:29:19,533
也就是从以前的 NVL 32

898
00:29:19,533 --> 00:29:21,800
到变现在的 NVL72 了

899
00:29:21,933 --> 00:29:24,400
从以前的简单 256 个 SuperPod 了

900
00:29:24,400 --> 00:29:27,133
变成现在的 572 个 SuperPod 了

901
00:29:27,133 --> 00:29:29,366
那这里面我们可以看到整体的 SuperPod

902
00:29:29,366 --> 00:29:31,283
不管是 SuperPod 还是 NVL

903
00:29:31,283 --> 00:29:33,566
具体的一个 Rack 的整体的组网形态了

904
00:29:33,566 --> 00:29:36,250
都引入了两层的交换

905
00:29:36,250 --> 00:29:37,366
而两层交换里面

906
00:29:37,366 --> 00:29:39,450
还可以加上 IB 和以太网

907
00:29:39,650 --> 00:29:40,933
集成一个万卡集群

908
00:29:40,933 --> 00:29:42,366
甚至 10 万卡集群

909
00:29:42,366 --> 00:29:43,250
这里面

910
00:29:43,250 --> 00:29:44,366
还是蛮有意思

911
00:29:44,366 --> 00:29:46,883
我们整体的产品的形态和解决方案

912
00:29:46,883 --> 00:29:48,333
其实是进一步拓展

913
00:29:49,333 --> 00:29:50,250
那第五个分析

914
00:29:50,250 --> 00:29:51,933
就是网络的代化

915
00:29:51,933 --> 00:29:54,333
现在其实在不断的去弥补

916
00:29:54,333 --> 00:29:56,533
计算性能提升慢的问题

917
00:29:56,650 --> 00:29:58,200
整个串口

918
00:29:58,200 --> 00:30:00,883
当时还是 224 GBps

919
00:30:00,883 --> 00:30:03,933
现在已经提升到 336 或者 448 了

920
00:30:03,933 --> 00:30:05,050
算我们的网络带宽

921
00:30:05,050 --> 00:30:06,566
也在不断的提升

922
00:30:06,600 --> 00:30:09,083
尽可能的让我们整个网络模型

923
00:30:09,083 --> 00:30:11,483
或者大模型计算的 MFU

924
00:30:11,683 --> 00:30:13,166
也就是算力的利用率也好

925
00:30:13,166 --> 00:30:14,450
硬件利用率也好

926
00:30:14,450 --> 00:30:16,883
硬件利用率其实叫做 HFU 了

927
00:30:16,883 --> 00:30:18,483
我们现在训练一个大模型

928
00:30:18,483 --> 00:30:19,600
实际上的利用率

929
00:30:19,600 --> 00:30:21,333
其实只能占到 50%

930
00:30:21,333 --> 00:30:24,166
有大量的时间都在做通讯和

931
00:30:24,166 --> 00:30:27,166
互传数据和等待和同步相关的问题

932
00:30:27,166 --> 00:30:28,650
真正的计算的利用率

933
00:30:28,650 --> 00:30:29,533
其实并不高

934
00:30:29,533 --> 00:30:30,250
所以这里面

935
00:30:30,250 --> 00:30:32,683
就提供了网络的带宽

936
00:30:32,683 --> 00:30:33,883
去弥补计算的性能

937
00:30:33,883 --> 00:30:36,800
尽可能去把我们的更好的一些

938
00:30:36,800 --> 00:30:38,366
MFU 提升上来

939
00:30:38,366 --> 00:30:38,850
那这个

940
00:30:38,850 --> 00:30:40,566
也就是提升网络带宽

941
00:30:40,566 --> 00:30:42,450
一个比较明显的收益

942
00:30:42,450 --> 00:30:44,250
我们可以真正的去实现

943
00:30:44,250 --> 00:30:47,250
计算跟通讯更好的并行

944
00:30:47,333 --> 00:30:48,166
那这里面

945
00:30:48,166 --> 00:30:49,883
单柜就单柜

946
00:30:49,883 --> 00:30:52,933
就实现了 72-140 个 GPU 的超级互联

947
00:30:52,933 --> 00:30:53,683
计算密度

948
00:30:53,683 --> 00:30:55,566
对比起上一代提升了一倍

949
00:30:55,600 --> 00:30:57,766
带宽是提升了整体 4 倍

950
00:30:57,766 --> 00:30:59,400
所以说我们看到训练

951
00:30:59,400 --> 00:31:01,766
它提升了 3 倍多的训练性能

952
00:31:01,766 --> 00:31:04,000
在推理提升了 15 倍的推理性能

953
00:31:04,000 --> 00:31:06,400
也是非常的有借鉴意义

954
00:31:06,400 --> 00:31:08,000
因为每一代产品它都不一样

955
00:31:09,133 --> 00:31:09,566
那另外

956
00:31:09,566 --> 00:31:10,966
还有一些额外的分析

957
00:31:10,966 --> 00:31:12,883
就是交换机的端口变的更多了

958
00:31:12,883 --> 00:31:15,483
这是更大规模的一个集群

959
00:31:15,483 --> 00:31:17,533
因为整个 GH200 里面

960
00:31:17,533 --> 00:31:20,083
说实话它应该是不是非常成熟的产品

961
00:31:20,083 --> 00:31:22,083
反倒是直接卖 H100

962
00:31:22,083 --> 00:31:24,450
H200 H800 这种形态会更多

963
00:31:24,566 --> 00:31:25,883
然后 NV

964
00:31:25,883 --> 00:31:27,600
未来可能还会享受比较

965
00:31:27,766 --> 00:31:31,083
好的一个台积电的性能的红利

966
00:31:31,083 --> 00:31:32,883
可以持续的发展多年

967
00:31:33,000 --> 00:31:33,966
而且

968
00:31:33,966 --> 00:31:35,250
光通讯这一块

969
00:31:35,250 --> 00:31:36,766
还是有待释放能力

970
00:31:36,766 --> 00:31:38,483
包括芯片内的光互联

971
00:31:38,483 --> 00:31:41,566
还有芯片的一个直出的光相关的内容

972
00:31:41,566 --> 00:31:42,333
那基本上

973
00:31:42,333 --> 00:31:43,250
今天的内容

974
00:31:43,250 --> 00:31:44,133
就到这为止了

975
00:31:44,133 --> 00:31:46,850
整个 NVL 的或者整个 Blackwell 系列了

976
00:31:46,850 --> 00:31:47,250
ZOMI

977
00:31:47,250 --> 00:31:48,050
已经分享到这

978
00:31:48,283 --> 00:31:49,533
欢迎各位来吐槽

979
00:31:49,533 --> 00:31:51,650
和指出相关的错误点了

980
00:31:51,650 --> 00:31:52,083
谢谢各位

981
00:31:52,083 --> 00:31:52,883
拜了个拜

