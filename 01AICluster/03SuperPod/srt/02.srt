1
00:00:00,000 --> 00:00:01,933
内容/录制:Z0MI 酱，视频剪辑/字幕:梁嘉铭

2
00:00:03,883 --> 00:00:06,083
哈喽大家好

3
00:00:06,083 --> 00:00:07,766
刚 ZOMI 去完学术酒吧

4
00:00:07,766 --> 00:00:08,533
现在回来了

5
00:00:08,533 --> 00:00:09,566
在酒店里面

6
00:00:09,566 --> 00:00:12,533
跟大家一起去深度的去探讨一下

7
00:00:12,533 --> 00:00:14,850
英伟达的新一代的一个产品

8
00:00:14,933 --> 00:00:16,333
说实话 Blackwell 的架构

9
00:00:16,333 --> 00:00:17,683
网上没有公布太多的信息

10
00:00:17,683 --> 00:00:18,733
所以我们只能

11
00:00:18,933 --> 00:00:20,600
去了解一下产品相关内容了

12
00:00:20,600 --> 00:00:22,050
在整一节内容里面

13
00:00:22,050 --> 00:00:24,000
可能会比上一节的内容的视频

14
00:00:24,050 --> 00:00:25,533
稍微多了那么一点点

15
00:00:25,533 --> 00:00:27,483
或者深入了你那么一点点的

16
00:00:27,733 --> 00:00:30,333
之所以要去了解英伟达的芯片

17
00:00:30,333 --> 00:00:31,800
加国芯片的产品的信息

18
00:00:31,800 --> 00:00:33,850
主要是为了对我们未来的产品

19
00:00:33,850 --> 00:00:35,883
和未来的一个产品引进的使用态

20
00:00:35,933 --> 00:00:38,400
还有地表最强的算力的

21
00:00:38,400 --> 00:00:40,000
有一个深度的了解

22
00:00:40,000 --> 00:00:42,933
也就是所谓的知彼知己百战不殆嘛

23
00:00:42,933 --> 00:00:45,283
就是了解我们的友商无可厚非

24
00:00:45,333 --> 00:00:47,366
而不是为了讲友商讲友商

25
00:00:47,366 --> 00:00:48,283
首先我们来看一下

26
00:00:48,283 --> 00:00:50,483
Blackwell 的整体架构的芯片的信息

27
00:00:50,800 --> 00:00:52,966
接着我们就会看一个节点

28
00:00:52,966 --> 00:00:54,766
了解完芯片之后还是看节点

29
00:00:54,800 --> 00:00:55,366
GH200

30
00:00:55,366 --> 00:00:57,800
跟 GB200 的一个产品的一个具体的差异

31
00:00:57,883 --> 00:01:00,000
接着我们就会去看第三个点

32
00:01:00,000 --> 00:01:02,083
HGX 的 H200 或者

33
00:01:02,083 --> 00:01:03,333
H100 还是 B200

34
00:01:03,333 --> 00:01:05,450
B100 的一个系列产品的相关的信息

35
00:01:05,450 --> 00:01:07,283
说实话我们会比上一节视频

36
00:01:07,333 --> 00:01:09,200
深入了那么一点点

37
00:01:10,283 --> 00:01:11,850
现在我们马上来到了第一个内容

38
00:01:11,850 --> 00:01:14,733
去看一下整个 GPU 的一个产品的介绍

39
00:01:14,733 --> 00:01:16,333
说实话我们还是要了解一下

40
00:01:16,333 --> 00:01:18,133
它的一个发展路径的

41
00:01:18,133 --> 00:01:19,283
那这个图还蛮有意思的

42
00:01:19,283 --> 00:01:21,250
从 21 年的 H100 的架构

43
00:01:21,566 --> 00:01:22,766
到了 25 年了

44
00:01:22,766 --> 00:01:23,566
25 年还没到嘛

45
00:01:23,566 --> 00:01:25,566
现在我们在了这个时间点

46
00:01:25,600 --> 00:01:26,933
24 年的年底了

47
00:01:26,933 --> 00:01:28,966
明年可能会发 X100

48
00:01:28,966 --> 00:01:31,250
但 ZOMI 觉得可能他

49
00:01:31,250 --> 00:01:33,050
只能说官网发 X100 了

50
00:01:33,050 --> 00:01:34,650
因为 B 系列的话

51
00:01:34,650 --> 00:01:35,800
说实话他已经跳票了

52
00:01:35,800 --> 00:01:36,650
说实话

53
00:01:36,650 --> 00:01:37,733
B 系列为什么跳票

54
00:01:37,733 --> 00:01:38,566
其实讲完

55
00:01:38,566 --> 00:01:39,966
或者分析完这一系列的视频

56
00:01:39,966 --> 00:01:42,650
大家应该有个比较清楚的认知

57
00:01:43,133 --> 00:01:46,133
真正的做解决方案是没那么的简单的

58
00:01:46,366 --> 00:01:47,366
那回到这个图

59
00:01:47,366 --> 00:01:48,200
我们可以看一下

60
00:01:48,200 --> 00:01:51,000
从 21 年的英伟达发布 Amper 架构之后

61
00:01:51,000 --> 00:01:53,683
就推出了一个 A100 的一个产品形态

62
00:01:53,733 --> 00:01:55,166
接着过了两年

63
00:01:55,166 --> 00:01:56,283
也就是 2023 时候

64
00:01:56,283 --> 00:01:58,733
他发布了一个 H100 hopper 的架构

65
00:01:58,733 --> 00:02:00,166
H100 H200

66
00:02:00,333 --> 00:02:01,966
包括真正的一个发货

67
00:02:01,966 --> 00:02:03,333
其实是到这个时候

68
00:02:03,333 --> 00:02:04,600
虽然我们国内很多大厂

69
00:02:04,600 --> 00:02:05,933
后来为了做阉割

70
00:02:05,933 --> 00:02:07,333
他推出了 H800

71
00:02:07,333 --> 00:02:08,766
各种各样的产品形态

72
00:02:08,800 --> 00:02:10,366
whatever 可以看到

73
00:02:10,366 --> 00:02:13,083
从这个时间线的 A100 跟 H100

74
00:02:13,133 --> 00:02:15,650
到 B100 这里面还蛮有意思的

75
00:02:15,800 --> 00:02:17,766
A100 它上面是没东西的

76
00:02:17,766 --> 00:02:19,683
到 H200 上面就越了

77
00:02:19,683 --> 00:02:20,883
多了很多东西

78
00:02:20,883 --> 00:02:22,200
多了 GH 啦

79
00:02:22,200 --> 00:02:24,333
GB 啦还有那个 NVL

80
00:02:24,333 --> 00:02:25,566
这里面多了 NVL

81
00:02:25,683 --> 00:02:27,966
这证明着可能从之前的时代

82
00:02:27,966 --> 00:02:29,133
我们的芯片的架构

83
00:02:29,133 --> 00:02:30,483
不断的演进

84
00:02:30,766 --> 00:02:31,600
到了 24 年

85
00:02:31,600 --> 00:02:32,933
现在已经不是芯片架构

86
00:02:32,933 --> 00:02:34,933
演进的一个最关键路径

87
00:02:34,933 --> 00:02:37,000
或者他提升性能最大的一个路径了

88
00:02:37,000 --> 00:02:38,683
反而往上去做了

89
00:02:38,683 --> 00:02:40,133
往节点规模去做了

90
00:02:40,133 --> 00:02:42,200
往解决方案的去做了

91
00:02:42,200 --> 00:02:42,850
那这个时候

92
00:02:42,850 --> 00:02:45,283
我们可以看到产品的形态也在变化

93
00:02:45,533 --> 00:02:45,966
顺势的

94
00:02:45,966 --> 00:02:49,200
也推出了对应的一些网络的产品

95
00:02:49,200 --> 00:02:52,400
Quatum 还有 Spectrum x 相关的一些产品

96
00:02:52,400 --> 00:02:53,600
包括里面的带宽

97
00:02:53,600 --> 00:02:55,200
也是越来越大的

98
00:02:55,200 --> 00:02:56,250
那在这个情况下

99
00:02:56,250 --> 00:02:57,133
我们可以看到

100
00:02:57,133 --> 00:03:00,000
我们的芯片的算力的能力的提升

101
00:03:00,000 --> 00:03:01,200
开始受限了

102
00:03:01,200 --> 00:03:04,283
于是网上是做一些解决方案的

103
00:03:04,283 --> 00:03:06,566
另外的话我们会往深的去

104
00:03:06,566 --> 00:03:09,050
把我们的网络的带宽做大

105
00:03:09,050 --> 00:03:09,483
那这个

106
00:03:09,483 --> 00:03:11,600
就是英伟达的产品的演进的路径

107
00:03:11,600 --> 00:03:13,733
这也是国内很多厂商

108
00:03:13,766 --> 00:03:15,650
其实也在跟随这条路径的

109
00:03:15,650 --> 00:03:17,600
不管是壁仞、寒武纪

110
00:03:17,600 --> 00:03:20,733
燧原还是其他玩家

111
00:03:21,000 --> 00:03:21,133
哎

112
00:03:21,133 --> 00:03:24,400
包括昇腾了也会往这个方向去引进

113
00:03:24,400 --> 00:03:25,400
我个人觉得

114
00:03:25,400 --> 00:03:28,400
这是一个历史的必然的选择

115
00:03:28,933 --> 00:03:30,450
那我们接下来还是重点的

116
00:03:30,450 --> 00:03:32,566
去看看英伟达的这一款芯片

117
00:03:32,566 --> 00:03:35,083
这款芯片是我们的 B200 的芯片

118
00:03:35,083 --> 00:03:36,283
还蛮有意思的

119
00:03:36,283 --> 00:03:39,400
这款芯片实际上是有两个 Die 合封的

120
00:03:39,400 --> 00:03:41,650
所以我们可以看到以前的单机 8 卡

121
00:03:41,650 --> 00:03:42,533
到现在来说

122
00:03:42,533 --> 00:03:44,000
我终于也觉得

123
00:03:44,000 --> 00:03:46,250
他还是单机 8 卡的形态

124
00:03:46,250 --> 00:03:48,733
因为他把两个 Die 进行了合封

125
00:03:48,733 --> 00:03:51,250
第一个 Die 就是左边的这一块

126
00:03:51,250 --> 00:03:53,000
第二个 Die 就我们的星叶

127
00:03:53,000 --> 00:03:55,366
就右边的这一块上面

128
00:03:55,366 --> 00:03:57,600
就有各种有 4 个 HBM 了

129
00:03:57,600 --> 00:04:00,333
那每个 HBM 是 HBM3 嘛

130
00:04:00,333 --> 00:04:01,050
那可以看到

131
00:04:01,050 --> 00:04:04,050
HBM 的一个带宽还是非常的高的

132
00:04:04,050 --> 00:04:05,933
而芯片跟芯片之间的

133
00:04:05,933 --> 00:04:07,366
一个互联的方式

134
00:04:07,366 --> 00:04:09,000
是用了 10TB/s

135
00:04:09,000 --> 00:04:10,450
还是蛮有意思的

136
00:04:10,533 --> 00:04:13,283
虽然 Die 跟 Die 之间需要互联

137
00:04:13,566 --> 00:04:15,933
但我跟 HBM 之间还要互联

138
00:04:15,933 --> 00:04:17,050
所以现在来看

139
00:04:17,050 --> 00:04:19,600
互联的情况和互联的一个

140
00:04:19,600 --> 00:04:21,966
带宽就变得越来的越重要了

141
00:04:21,966 --> 00:04:23,933
我们看一下整体的 GPU 的芯片

142
00:04:23,933 --> 00:04:25,566
首先在制造工艺方面

143
00:04:25,566 --> 00:04:27,000
我们看第一个内容 Blackwell

144
00:04:27,000 --> 00:04:28,683
GPU 给取 H100

145
00:04:28,766 --> 00:04:32,483
其实都是采用台积电的 4 纳米的工艺

146
00:04:32,483 --> 00:04:35,400
而晶体管的数量还是差异蛮大的

147
00:04:35,400 --> 00:04:38,450
H100 其实只有 800 亿个晶体管

148
00:04:38,450 --> 00:04:39,133
而 Blackwell

149
00:04:39,133 --> 00:04:40,133
它具备里面

150
00:04:40,133 --> 00:04:42,883
包含了 2080 个晶体管的

151
00:04:42,883 --> 00:04:45,883
多了非常的多了一倍有多

152
00:04:46,000 --> 00:04:47,650
大家可以看到 2.2 倍了

153
00:04:47,650 --> 00:04:49,883
其实那这意味着什么

154
00:04:49,883 --> 00:04:52,166
我觉得这句话非常的有意思

155
00:04:52,166 --> 00:04:54,766
意味着 B200 的芯片的封装的密度

156
00:04:54,766 --> 00:04:57,366
说实话会比 H100 进一步的提高

157
00:04:57,400 --> 00:04:59,366
对我们的一些散热和功耗

158
00:04:59,366 --> 00:05:01,766
其实提出了更高的要求

159
00:05:01,766 --> 00:05:05,133
那在整体的封装形式也会不一样哦

160
00:05:05,333 --> 00:05:06,683
H100 是单 Die 的

161
00:05:06,683 --> 00:05:08,933
也就是单个进行封装的

162
00:05:08,933 --> 00:05:10,566
而 B 系列的 GPU

163
00:05:10,566 --> 00:05:12,333
它封装了两个 Die 的

164
00:05:12,333 --> 00:05:13,566
进行了一个合封

165
00:05:13,566 --> 00:05:16,683
每个岛的算力的大概是 H100 的 1.25 倍

166
00:05:16,683 --> 00:05:18,533
那我们看晶体管多了那么多

167
00:05:18,533 --> 00:05:19,283
它的性能

168
00:05:19,283 --> 00:05:21,483
其实提升的没有那么的夸张

169
00:05:21,533 --> 00:05:22,533
两个 Die 合封

170
00:05:22,533 --> 00:05:24,850
其实才变成 H100 的一个 2.5 倍

171
00:05:25,083 --> 00:05:25,933
那整体

172
00:05:25,933 --> 00:05:29,283
除了一个最核心的算力以外

173
00:05:29,283 --> 00:05:32,733
我们还会算一些高带宽的接口了

174
00:05:32,733 --> 00:05:33,283
那这里面

175
00:05:33,283 --> 00:05:36,000
我们叫 Nvidia high bandwidth interface

176
00:05:36,000 --> 00:05:37,283
也就必然把两个 Die

177
00:05:37,283 --> 00:05:40,000
两个 Die 跟 Die 之间的连接哦

178
00:05:40,083 --> 00:05:41,883
到达 10TBPps

179
00:05:41,883 --> 00:05:44,450
并且占用了部分的芯片的面积

180
00:05:44,450 --> 00:05:48,283
也就是中间的一坨我们鼠标所在的

181
00:05:49,000 --> 00:05:50,133
接下来我们还是要看一下

182
00:05:50,133 --> 00:05:52,766
一些 GPU 芯片的相关的信息

183
00:05:52,766 --> 00:05:54,283
还蛮有意思的就是 FP8 了

184
00:05:54,283 --> 00:05:56,050
其实在 H100 里面已经有了

185
00:05:56,050 --> 00:05:57,566
那在 B100 里面的话

186
00:05:57,766 --> 00:05:58,933
Blackwell 的加工里面

187
00:05:58,933 --> 00:06:02,533
就推出了两个新的一个精度的格式来

188
00:06:02,533 --> 00:06:03,850
一个是 FP6

189
00:06:03,850 --> 00:06:05,133
一个是 FP4

190
00:06:05,133 --> 00:06:07,283
那 FP6 或 FP4 大家就知 Die 了

191
00:06:07,283 --> 00:06:08,333
其实它们的位宽

192
00:06:08,333 --> 00:06:09,366
其实更多的少了

193
00:06:09,366 --> 00:06:10,450
然后整体来说

194
00:06:10,450 --> 00:06:12,283
它的一个算力的峰值

195
00:06:12,283 --> 00:06:14,283
其实还是蛮高的

196
00:06:14,283 --> 00:06:15,283
是以 P 级别为

197
00:06:15,283 --> 00:06:17,966
单位了而不是以 T flops 的为单位了

198
00:06:18,133 --> 00:06:18,733
那整体来说

199
00:06:18,733 --> 00:06:19,650
说实话现在

200
00:06:19,650 --> 00:06:21,966
英伟达是还不懈的去推动

201
00:06:21,966 --> 00:06:24,800
在证明它更低精度的数据格式

202
00:06:24,800 --> 00:06:25,933
能够训练出大模型

203
00:06:25,933 --> 00:06:28,000
但是现在除了做推理以外

204
00:06:28,000 --> 00:06:30,200
还是很少用这个那么低的精度

205
00:06:30,200 --> 00:06:31,883
去做一个训练的

206
00:06:32,166 --> 00:06:34,533
另外我们还可以看一下内存跟带宽

207
00:06:34,533 --> 00:06:37,683
带宽或者我们的 HBM 采用了 HBM3E

208
00:06:37,850 --> 00:06:40,800
每一个 HBM 的大小大概是 24GB

209
00:06:40,800 --> 00:06:42,683
那理论的带宽是 1.2TBps

210
00:06:42,683 --> 00:06:45,250
那实际为 1TBps

211
00:06:45,483 --> 00:06:46,966
整个 Blackwell 上面一共有 8 块

212
00:06:46,966 --> 00:06:49,083
这上面四块下面四块

213
00:06:49,133 --> 00:06:52,133
每个 Die 对应有 4 个 HBM3e Stack

214
00:06:52,133 --> 00:06:52,683
一个 GPU

215
00:06:52,683 --> 00:06:57,166
所以我们会有 192GB 的一个显存

216
00:06:57,166 --> 00:06:58,200
那以前叫显存

217
00:06:58,200 --> 00:07:00,450
现在其实都叫内存了

218
00:07:00,450 --> 00:07:02,366
因为它不是用来做显卡

219
00:07:02,366 --> 00:07:04,133
或来做具体的显示的

220
00:07:04,133 --> 00:07:06,650
不过这个名字就这么留存下来了

221
00:07:06,650 --> 00:07:09,166
那整体内存带宽是 8TB/s 的

222
00:07:09,450 --> 00:07:12,650
相比 H200 有六个 HBM2

223
00:07:12,650 --> 00:07:13,366
说实话

224
00:07:13,366 --> 00:07:15,800
它可以减少内存的一个芯片的面积

225
00:07:15,800 --> 00:07:17,250
使得我们的更多的面积

226
00:07:17,250 --> 00:07:19,083
留给我们的算力的

227
00:07:19,166 --> 00:07:21,133
那左边我们对比一下

228
00:07:21,133 --> 00:07:22,883
这个就是 H 系列的

229
00:07:22,883 --> 00:07:24,683
这个就是 Blackwell 系列的

230
00:07:24,683 --> 00:07:27,933
可以看它还是大了不是那么一点点哦

231
00:07:29,483 --> 00:07:30,800
接着我们放大来看看

232
00:07:30,800 --> 00:07:31,600
还是蛮有意思的

233
00:07:31,600 --> 00:07:33,050
不过可惜的就是

234
00:07:33,050 --> 00:07:35,200
没有那个紫外光的透视图

235
00:07:35,250 --> 00:07:36,200
所以我们没法看到

236
00:07:36,200 --> 00:07:39,050
里面更多的一些相关的细节

237
00:07:39,483 --> 00:07:42,133
不过证明了值得一个思考的就是

238
00:07:42,133 --> 00:07:44,250
首先制造的工艺

239
00:07:44,250 --> 00:07:46,566
也就是我们的纳米制程的性能

240
00:07:46,566 --> 00:07:48,200
实际上是在变换的

241
00:07:48,250 --> 00:07:50,883
B200 每个 Die 的算力大概是 H100 的

242
00:07:50,883 --> 00:07:55,000
1.25 倍两个 Die 合封才是 H100 的 2.5 倍

243
00:07:55,000 --> 00:07:55,766
大家可以看到

244
00:07:55,766 --> 00:07:57,733
我们的纳米制程的工艺提升

245
00:07:57,733 --> 00:08:00,250
包括我们的晶体管的数量在堆多

246
00:08:00,566 --> 00:08:04,366
但是算力哦没有一个急剧的上升

247
00:08:04,366 --> 00:08:06,800
也就是我们的硬件的架构

248
00:08:06,800 --> 00:08:08,566
开始慢慢受限了

249
00:08:08,600 --> 00:08:10,566
既然这一块受到限制

250
00:08:10,566 --> 00:08:13,200
从我们看封装的能力的提升

251
00:08:13,200 --> 00:08:13,883
现在来看

252
00:08:13,883 --> 00:08:15,766
是解决工艺制造的最好的

253
00:08:15,766 --> 00:08:17,400
或者一个现在来看

254
00:08:17,400 --> 00:08:18,883
比较妥协的一个方案

255
00:08:18,883 --> 00:08:21,800
所以现在大家都在开始拼封装了

256
00:08:21,800 --> 00:08:22,600
那封装这块

257
00:08:22,600 --> 00:08:24,966
国内还是相对比我们的低

258
00:08:24,966 --> 00:08:25,966
纳米制程的工艺

259
00:08:25,966 --> 00:08:29,283
还是相对稍微有那么一点点优势啦

260
00:08:29,650 --> 00:08:31,966
那我们看一下整体的封装技术

261
00:08:31,966 --> 00:08:35,133
从传统的单 Die 演进到双 Die

262
00:08:35,250 --> 00:08:37,333
未来可能会演进到 4Die

263
00:08:37,333 --> 00:08:39,250
或者 8Die 这种的封装

264
00:08:39,250 --> 00:08:39,850
但是

265
00:08:39,850 --> 00:08:42,200
Die 跟 Die 之间的封装的越多

266
00:08:42,200 --> 00:08:45,166
其实我们有一个东西非常的受限的

267
00:08:45,166 --> 00:08:47,366
就是高带宽的连接

268
00:08:47,883 --> 00:08:50,800
中间的把 Die 跟 Die 之间连接的这一层

269
00:08:51,050 --> 00:08:53,533
高带宽的连接层

270
00:08:53,533 --> 00:08:56,483
HV-HBI 的 interfaced 到底怎么做

271
00:08:56,483 --> 00:08:58,133
这个是很核心的哦

272
00:08:58,683 --> 00:09:01,600
说实话网上对英伟达相关的信息

273
00:09:01,600 --> 00:09:02,800
纰漏还是比较少的

274
00:09:02,800 --> 00:09:03,883
不像前几年

275
00:09:03,883 --> 00:09:07,650
他还是相对开放了很多的 white paper

276
00:09:07,966 --> 00:09:08,883
也就是白皮书

277
00:09:08,883 --> 00:09:10,683
包括他们芯片相关的信息

278
00:09:10,683 --> 00:09:12,283
还有产品相关的信息

279
00:09:12,333 --> 00:09:12,883
那现在

280
00:09:12,883 --> 00:09:14,683
我们只能连蒙带猜的

281
00:09:14,683 --> 00:09:16,283
看一下它相关的内容了

282
00:09:16,283 --> 00:09:17,133
接着我们现在

283
00:09:17,133 --> 00:09:20,933
来到了 GH200 跟 GB200 相关的系列

284
00:09:20,933 --> 00:09:23,133
那刚才我们其实从这个图已经看到了

285
00:09:23,133 --> 00:09:24,483
它的芯片的架构

286
00:09:24,483 --> 00:09:25,683
其实在演进

287
00:09:25,683 --> 00:09:28,000
但是演进已经没有以前快了

288
00:09:28,000 --> 00:09:29,566
那现在开始做什么了

289
00:09:29,766 --> 00:09:31,133
网上去做堆叠

290
00:09:31,133 --> 00:09:32,250
做解决方案

291
00:09:32,250 --> 00:09:33,050
做解决方案里面

292
00:09:33,050 --> 00:09:34,483
最大最头痛的一个问题

293
00:09:34,483 --> 00:09:37,083
解决方案它不是靠我们的加工的设计

294
00:09:37,083 --> 00:09:39,483
更多的是靠我们的经验

295
00:09:39,766 --> 00:09:41,850
那解决方案为啥我们国内很难做

296
00:09:41,850 --> 00:09:43,133
或者很少去做

297
00:09:43,133 --> 00:09:45,733
是因为他需要对大量的工程的经验

298
00:09:45,733 --> 00:09:47,933
和实践出来才能做起来的

299
00:09:47,933 --> 00:09:49,766
那有了 H200

300
00:09:49,766 --> 00:09:53,133
B200 这种或者 B100 相关的芯片之后

301
00:09:53,133 --> 00:09:56,483
就会把它做成一个简单的 trace 的

302
00:09:56,483 --> 00:09:58,400
或者简单的一个联合封装

303
00:09:58,400 --> 00:10:00,650
然后就变成了 GH200 GH200

304
00:10:00,650 --> 00:10:01,600
再做堆叠

305
00:10:01,600 --> 00:10:04,283
就变成了 NVL 这种形态了

306
00:10:04,283 --> 00:10:06,400
就是 SuperPod 的相关的形态

307
00:10:06,400 --> 00:10:09,200
我们现在来看看它所谓的 GH200

308
00:10:09,200 --> 00:10:10,366
到底长什么样子

309
00:10:10,483 --> 00:10:11,733
就是右边的这个

310
00:10:11,733 --> 00:10:13,850
已经放的非常的大了

311
00:10:13,850 --> 00:10:14,966
那这一款芯片

312
00:10:14,966 --> 00:10:19,083
是 2020 年的时候英伟达推出的芯片

313
00:10:19,133 --> 00:10:21,333
那为什么叫 G

314
00:10:21,333 --> 00:10:22,733
H200 了

315
00:10:22,733 --> 00:10:24,166
H200 大家都知道

316
00:10:24,333 --> 00:10:26,883
G 就是 Grace CPU

317
00:10:26,883 --> 00:10:28,850
那从下面这个图我们可以看到

318
00:10:28,850 --> 00:10:31,683
Grace CPU 是左边的这一块

319
00:10:31,683 --> 00:10:32,533
上面这些

320
00:10:32,533 --> 00:10:35,650
其实是我们的对应的内存叫做 LPDDR 了

321
00:10:35,850 --> 00:10:38,133
另外的话我们看一下右边的这一颗

322
00:10:38,133 --> 00:10:40,283
这个就是我们的 H200 的 GPU

323
00:10:40,283 --> 00:10:42,400
那这里面有其实各三块

324
00:10:42,400 --> 00:10:45,483
一共六块的一个具体的 HBM

325
00:10:45,566 --> 00:10:47,566
那 HBM 是用 HBM3e

326
00:10:47,566 --> 00:10:49,366
所以我们看到这款芯片

327
00:10:49,366 --> 00:10:51,483
整体 H200 的 GPU 的显存

328
00:10:51,766 --> 00:10:55,133
由 6 个 24G 变成了 96 GB 或者 140 GB

329
00:10:55,133 --> 00:10:56,766
它可以可配可选了

330
00:10:56,766 --> 00:10:59,850
整体的 Grace CPU 跟 hopper GPU 之间

331
00:10:59,850 --> 00:11:04,000
它是通过一个 NVlink-C2C 的一进行互联

332
00:11:04,050 --> 00:11:04,850
整体的带宽

333
00:11:04,850 --> 00:11:07,450
可以去到 900 GB/s 非常的夸张了

334
00:11:07,450 --> 00:11:09,483
不过有人就会问了

335
00:11:09,483 --> 00:11:11,083
用了 900 GB/s

336
00:11:11,133 --> 00:11:13,283
到底对大模型训练有没有用

337
00:11:13,483 --> 00:11:15,566
说实话对大模型训练

338
00:11:15,566 --> 00:11:17,883
真的 ZOMI 觉得了意义不太大

339
00:11:17,883 --> 00:11:20,333
但是对于一些多模态的大模型

340
00:11:20,333 --> 00:11:22,600
特别是在推荐领域的大模型

341
00:11:22,600 --> 00:11:25,850
可能这个 C2C 的一个互联方式

342
00:11:25,850 --> 00:11:26,733
会非常有用

343
00:11:26,733 --> 00:11:28,450
因为在推荐模型里面

344
00:11:28,450 --> 00:11:30,650
第一层的 embanding 会非常的大

345
00:11:30,800 --> 00:11:31,800
因为地上的一面内

346
00:11:31,800 --> 00:11:33,850
需要输入大量的用户的信息

347
00:11:33,850 --> 00:11:35,333
还有大量的物品的信息

348
00:11:35,333 --> 00:11:36,850
进行一个回溯

349
00:11:36,850 --> 00:11:39,366
召回检索相关的内容

350
00:11:39,366 --> 00:11:40,333
当然了

351
00:11:40,400 --> 00:11:40,966
之前面试

352
00:11:40,966 --> 00:11:43,566
有些人居然觉得我不懂推荐

353
00:11:43,566 --> 00:11:44,650
怎么可能

354
00:11:44,650 --> 00:11:47,400
只是你说的所谓的金牌

355
00:11:47,733 --> 00:11:50,083
我以为你拿的是金牌个人

356
00:11:50,083 --> 00:11:52,400
原来你说召回之后在精排

357
00:11:52,400 --> 00:11:54,166
导致我们两个语言没对齐

358
00:11:54,883 --> 00:11:56,200
这是一个话外题

359
00:11:56,200 --> 00:11:57,566
那整体来说

360
00:11:57,566 --> 00:11:59,933
我们可以看到这款一个 SuperChip

361
00:11:59,933 --> 00:12:01,400
还是比较有意思的

362
00:12:01,400 --> 00:12:04,333
我们往下看一下它的一个逻辑架构图

363
00:12:04,333 --> 00:12:06,050
从逻辑架构图里面

364
00:12:06,050 --> 00:12:07,000
我们其实一样的

365
00:12:07,000 --> 00:12:08,600
左边是 Grace 的 CPU

366
00:12:08,600 --> 00:12:10,850
右边是 hopper 的 GPU

367
00:12:10,883 --> 00:12:11,766
那 GPU 这边

368
00:12:11,766 --> 00:12:15,250
就会用了 HBM 3 或者 HBM3e

369
00:12:15,250 --> 00:12:15,683
然后

370
00:12:15,683 --> 00:12:19,566
CPU 会用 LPDDR5 相关的方式去组成的

371
00:12:19,566 --> 00:12:22,200
然后对外走的是 PCIE

372
00:12:22,200 --> 00:12:23,166
那对外这边

373
00:12:23,166 --> 00:12:24,533
走的是 NV link

374
00:12:24,533 --> 00:12:26,400
GPU 跟 GPU 之间进行互联

375
00:12:26,483 --> 00:12:27,000
CPU

376
00:12:27,000 --> 00:12:29,450
会可能跟外部的设备进行一个互联

377
00:12:29,450 --> 00:12:30,533
包括我们的网络了

378
00:12:30,533 --> 00:12:33,133
我们的一些其他的外部的接口

379
00:12:33,366 --> 00:12:34,400
那通过这种方式

380
00:12:34,400 --> 00:12:35,683
组成我们整个区

381
00:12:36,000 --> 00:12:37,083
H200 SuperChip

382
00:12:37,083 --> 00:12:37,966
那 GH200

383
00:12:37,966 --> 00:12:39,333
里面还是蛮有意思的

384
00:12:39,333 --> 00:12:42,400
就是它有一个所谓的统一的寻址

385
00:12:42,400 --> 00:12:44,483
也就把 CPU 的一个内存

386
00:12:44,483 --> 00:12:45,566
跟 GPU 的内存

387
00:12:45,566 --> 00:12:47,800
它放成一个虚拟的 table

388
00:12:47,850 --> 00:12:49,483
那真正的左边的这个

389
00:12:49,483 --> 00:12:50,933
是它实际的物理的 table

390
00:12:51,000 --> 00:12:51,683
右边这个

391
00:12:51,683 --> 00:12:54,766
是它实际 GPU 里面的一个显存

392
00:12:54,766 --> 00:12:55,600
或者叫内存

393
00:12:55,600 --> 00:12:56,283
也好了

394
00:12:56,283 --> 00:12:58,200
里面做成一个虚拟化的内存池

395
00:12:58,200 --> 00:12:59,166
导致我们的内存

396
00:12:59,166 --> 00:13:00,966
看上去是非常非常的夸张

397
00:13:00,966 --> 00:13:01,733
非常的大的

398
00:13:01,733 --> 00:13:03,966
但是国内好多好像很多厂商

399
00:13:03,966 --> 00:13:06,083
其实是拿不到这一款产品

400
00:13:06,083 --> 00:13:08,733
只能用阉割的产品或者自己拼的产品

401
00:13:08,733 --> 00:13:10,366
真正的用 SuperChip 的

402
00:13:10,366 --> 00:13:12,000
ZOMI 了解的还是非常的少

403
00:13:12,000 --> 00:13:13,083
或者甚至没有

404
00:13:13,083 --> 00:13:14,000
那右边的这个

405
00:13:14,000 --> 00:13:15,000
就具体的图了

406
00:13:15,000 --> 00:13:16,533
当然这里面的 CPU 跟 GPU

407
00:13:16,533 --> 00:13:18,650
是刚好是反过来的

408
00:13:18,650 --> 00:13:20,166
那大家多看看这个图

409
00:13:20,166 --> 00:13:20,733
没关系

410
00:13:20,733 --> 00:13:21,883
都可以多了解

411
00:13:21,883 --> 00:13:25,283
反正 ZOMI 是没见过对应的实物了

412
00:13:25,283 --> 00:13:26,850
讲完 h 之后

413
00:13:26,850 --> 00:13:28,766
我们现在来到了 b 啦

414
00:13:28,766 --> 00:13:31,133
那同样的它为什么叫 GB200

415
00:13:31,133 --> 00:13:32,533
是因为 Graced

416
00:13:32,800 --> 00:13:34,966
我们的 CPU 跟 B200 的 GPU

417
00:13:35,133 --> 00:13:38,250
进行一个放成一个 trace 了

418
00:13:38,250 --> 00:13:39,800
那这里面变成一个 super two

419
00:13:39,800 --> 00:13:40,766
还是蛮有意思的

420
00:13:40,766 --> 00:13:42,133
一个 GB200

421
00:13:42,133 --> 00:13:44,883
其实是由一个 graced CPU

422
00:13:44,883 --> 00:13:46,333
也就是这里面的这一个

423
00:13:46,333 --> 00:13:49,400
加两个 Blackwell 的一个 GPU 去组成了

424
00:13:49,400 --> 00:13:50,650
那这张图还是蛮有意思的

425
00:13:50,650 --> 00:13:52,366
它不是实字幕图去拍的

426
00:13:52,366 --> 00:13:54,850
它是一个具体的三维建模的图

427
00:13:54,850 --> 00:13:56,733
那这边也可以看到一个 GB200

428
00:13:56,733 --> 00:13:58,766
它有两个 Die 进行封装

429
00:13:58,933 --> 00:14:01,200
然后跟刚才其实介绍的一样了

430
00:14:01,200 --> 00:14:03,450
那 CPU 跟 GPU 之间的一个通过

431
00:14:03,650 --> 00:14:05,766
C2C 的实现高速互联了

432
00:14:05,766 --> 00:14:07,200
跟第一代词是相同的

433
00:14:07,200 --> 00:14:08,683
都是用 900 Gbps

434
00:14:08,683 --> 00:14:10,933
然后整体的功耗是非常夸张的

435
00:14:11,166 --> 00:14:14,400
一个 tray 用到了就一个计算的板载

436
00:14:14,533 --> 00:14:17,566
computing tray 用了 1,200 多瓦

437
00:14:17,566 --> 00:14:20,600
那里面其实因为有两个 Blackwell 嘛

438
00:14:20,600 --> 00:14:21,166
所以里面

439
00:14:21,166 --> 00:14:22,966
就包含了 384GB 的

440
00:14:22,966 --> 00:14:25,483
HBM3e 的一个具体的内存

441
00:14:25,483 --> 00:14:26,850
功能显存也好

442
00:14:26,850 --> 00:14:27,800
同样的

443
00:14:27,800 --> 00:14:30,933
这里面我们可以看到有很多小的 LPDDR

444
00:14:31,000 --> 00:14:33,600
相关的一共是 480G

445
00:14:33,650 --> 00:14:36,133
所以说整体内存合起来

446
00:14:36,200 --> 00:14:40,250
HBM 加 LPDDR 就一共有了 864GB

447
00:14:40,683 --> 00:14:41,883
非常的惊人

448
00:14:41,883 --> 00:14:43,083
那真正的实物图

449
00:14:43,083 --> 00:14:45,366
是变成右边的那样了

450
00:14:45,400 --> 00:14:46,966
右边那样就相对丑一点了

451
00:14:46,966 --> 00:14:48,933
还是我们的渲染图好看了

452
00:14:48,933 --> 00:14:50,883
大家多看看渲染图就完了

453
00:14:51,333 --> 00:14:52,166
那左边这个

454
00:14:52,166 --> 00:14:54,766
就是他的一个逻辑架构图了

455
00:14:54,766 --> 00:14:56,533
那逻辑架构图大家也可以看一下

456
00:14:56,533 --> 00:14:57,800
semiainalysis

457
00:14:57,800 --> 00:15:00,000
上面其实还有蛮多有意思的文章

458
00:15:00,000 --> 00:15:02,533
也做了很多深入的一些推广了

459
00:15:02,533 --> 00:15:03,600
那可以看到这里面

460
00:15:03,600 --> 00:15:05,200
有很多相关的细节

461
00:15:05,200 --> 00:15:06,533
包括代表的 GPU

462
00:15:06,533 --> 00:15:07,683
后面的这两坨

463
00:15:07,683 --> 00:15:10,366
主要是给 nv link 5 进行一个互联的

464
00:15:10,483 --> 00:15:12,533
左边这边有一个连接器

465
00:15:12,533 --> 00:15:13,366
还有右边

466
00:15:13,366 --> 00:15:14,850
有很多相关的电源

467
00:15:14,850 --> 00:15:16,333
或者电路的相关的单位

468
00:15:16,333 --> 00:15:18,533
还有一些下面的插风扇的接口

469
00:15:18,533 --> 00:15:19,250
说实话

470
00:15:19,250 --> 00:15:22,800
整个 semiainalysis 还是做的非常的深入的洞察

471
00:15:22,800 --> 00:15:24,650
大家看相关的信息就行了

472
00:15:24,800 --> 00:15:27,166
现在我 ZOMI 希望跟大家一起

473
00:15:27,166 --> 00:15:28,683
探讨一些小的问题

474
00:15:29,050 --> 00:15:31,533
首先在 Blackwell 这个架构

475
00:15:31,533 --> 00:15:33,566
因为它不再使用封装的技术

476
00:15:33,566 --> 00:15:35,683
来解决部件的瓶颈性问题了

477
00:15:35,683 --> 00:15:38,000
现在直接用了 Rack 就整个

478
00:15:38,000 --> 00:15:39,850
板卡的新的概念

479
00:15:39,850 --> 00:15:40,800
来去封装

480
00:15:40,800 --> 00:15:42,600
那上面我们看到的这一个

481
00:15:42,600 --> 00:15:44,366
就是真正的一个 Rack

482
00:15:44,450 --> 00:15:47,600
一个计算的 Rack 的一个板卡来去

483
00:15:47,600 --> 00:15:48,250
那 Rack

484
00:15:48,250 --> 00:15:50,483
为超级点提供更高密度的

485
00:15:50,483 --> 00:15:51,883
集成的解决方案

486
00:15:51,883 --> 00:15:54,366
我们现在都推从解决方案了

487
00:15:54,366 --> 00:15:57,450
而不是叫我们推出一款新的芯片

488
00:15:57,450 --> 00:15:59,000
新的芯片说实话

489
00:15:59,000 --> 00:16:01,050
它只能说提升一点点精度

490
00:16:01,050 --> 00:16:03,166
随着我们的纳米制程工艺的提升

491
00:16:03,200 --> 00:16:04,683
它提升的性能

492
00:16:04,683 --> 00:16:07,333
或者提升的算力没那么的大

493
00:16:07,333 --> 00:16:10,050
所以我们会提供更高密度的

494
00:16:10,050 --> 00:16:12,050
集成解决方案

495
00:16:12,083 --> 00:16:13,333
另外的话第三个

496
00:16:13,333 --> 00:16:14,850
就是 Host 跟 DEVICES

497
00:16:14,850 --> 00:16:17,166
也有 GPU 跟 CPU 之间统一编制

498
00:16:17,250 --> 00:16:19,533
非常利于内存管理

499
00:16:19,533 --> 00:16:22,366
特别是在一些大规模的推荐模型

500
00:16:22,366 --> 00:16:23,333
现在的推荐模型

501
00:16:23,333 --> 00:16:26,850
其实迎来了新的一波的洗牌和浪潮

502
00:16:26,883 --> 00:16:30,400
至今为止大模型里面规模最大的

503
00:16:30,400 --> 00:16:34,083
真正开源的是推荐的大模型

504
00:16:34,166 --> 00:16:35,683
那不是大语言模型

505
00:16:35,683 --> 00:16:37,483
大家有一个新的认识

506
00:16:37,483 --> 00:16:38,850
所以这个还是蛮有意思的

507
00:16:38,850 --> 00:16:40,566
是 Meta 发布的一篇文章

508
00:16:40,966 --> 00:16:43,250
哎讲着讲着不小心又讲多了

509
00:16:43,250 --> 00:16:47,000
接下来我们看一下 HGX 的一个 H100

510
00:16:47,000 --> 00:16:48,133
或者 H200

511
00:16:48,133 --> 00:16:51,000
还有个 B100 B200 都行

512
00:16:51,200 --> 00:16:53,050
我们现在来看一下整个 HGX

513
00:16:53,050 --> 00:16:54,000
H100 跟 H200

514
00:16:54,000 --> 00:16:54,733
还蛮有意思的

515
00:16:54,733 --> 00:16:56,800
左边这个还是它的一个渲染图

516
00:16:56,800 --> 00:16:57,566
那这里面

517
00:16:57,566 --> 00:16:59,966
我们可以看到有很多的小的芯片

518
00:16:59,966 --> 00:17:01,083
把两个三个片

519
00:17:01,083 --> 00:17:02,650
把它取出来了

520
00:17:02,650 --> 00:17:03,883
去掉了然后

521
00:17:03,883 --> 00:17:05,533
后面是 NV link

522
00:17:05,533 --> 00:17:07,566
那这个就是 HGX 的 100

523
00:17:07,800 --> 00:17:09,483
那跟刚才的 GB100

524
00:17:09,483 --> 00:17:10,800
最大的区别就是

525
00:17:10,800 --> 00:17:14,133
没有了英伟达自己的一个 Grace 的

526
00:17:14,366 --> 00:17:16,133
一个具体的 CPU

527
00:17:16,133 --> 00:17:18,083
而是采用可能 AMD

528
00:17:18,083 --> 00:17:18,800
或者英特尔

529
00:17:18,800 --> 00:17:21,966
或者其他的 arm 相关的一些 CPU

530
00:17:21,966 --> 00:17:24,933
从这种方式去组成我们的 HGX

531
00:17:24,933 --> 00:17:25,766
所以 HGX

532
00:17:25,766 --> 00:17:28,366
跟 GB 一系列是有点差异的

533
00:17:28,400 --> 00:17:31,933
里面的更多的是一些集成的方案

534
00:17:32,166 --> 00:17:33,283
那我们现在来看一下

535
00:17:33,283 --> 00:17:35,050
其实大家登录这个链接

536
00:17:35,050 --> 00:17:35,733
就可以看到

537
00:17:35,733 --> 00:17:38,400
里面有很多关于 HGX 的一个板块

538
00:17:38,400 --> 00:17:40,283
相关的详细的信息

539
00:17:40,283 --> 00:17:41,366
重点不在这里面

540
00:17:41,366 --> 00:17:42,600
慢慢的介绍了

541
00:17:42,733 --> 00:17:44,733
那 HGX 整个系列里面

542
00:17:44,733 --> 00:17:46,166
B 系列就我们的 Blackwell 了

543
00:17:46,166 --> 00:17:48,250
其实跟 g 系列是一样的

544
00:17:48,250 --> 00:17:51,250
里面就不再用我们的英伟达

545
00:17:51,250 --> 00:17:53,166
自己的 Grace 的 CPU 了

546
00:17:53,166 --> 00:17:55,733
而是采用业界的整体的解决方案

547
00:17:55,733 --> 00:17:56,483
那这里面

548
00:17:56,483 --> 00:18:00,600
其实大部分还是带英特或者 AMD 的

549
00:18:00,600 --> 00:18:04,600
现在都是 GPU 带动 CPU 的发展

550
00:18:04,600 --> 00:18:07,733
所以 CPU 的股价呀有点惨淡

551
00:18:07,800 --> 00:18:08,933
那我们现在看一下

552
00:18:08,933 --> 00:18:11,250
整体的官网公布的相关的细节

553
00:18:11,250 --> 00:18:12,400
同样的这里面

554
00:18:12,400 --> 00:18:15,083
最核心的就是对应的 tensorcore

555
00:18:15,083 --> 00:18:16,450
里面的算力

556
00:18:16,483 --> 00:18:17,883
那可以看到 FP32

557
00:18:17,883 --> 00:18:21,450
FP64 跟 FP 其他的大部分

558
00:18:21,450 --> 00:18:23,283
其实用的没有想象的过

559
00:18:23,283 --> 00:18:24,850
它其实用的是 CUDA core 了

560
00:18:24,850 --> 00:18:26,133
那里面最大的区别

561
00:18:26,133 --> 00:18:27,933
就是整个 HBM

562
00:18:28,050 --> 00:18:29,733
H100 跟 H200 的最大区别

563
00:18:29,733 --> 00:18:31,083
它的 HBM 带宽

564
00:18:31,083 --> 00:18:33,200
说实话大了非常的多

565
00:18:33,283 --> 00:18:35,533
接近涨了两倍

566
00:18:35,733 --> 00:18:38,133
其他你会发现长大的

567
00:18:38,133 --> 00:18:40,083
或者没有太多的区别

568
00:18:40,083 --> 00:18:42,733
包括 NVlink 跟 NV switch 的代际

569
00:18:42,733 --> 00:18:44,483
也是相同的

570
00:18:44,483 --> 00:18:47,733
就是在 H100 跟 H200 的区别

571
00:18:47,733 --> 00:18:50,250
H100 跟 H200 自己跟自己比呀

572
00:18:50,250 --> 00:18:52,083
它不是跟 B 系列比哦

573
00:18:52,483 --> 00:18:54,733
那接着我们看一下另外一个信息

574
00:18:54,733 --> 00:18:57,333
就是 HGX 的 B200 跟 HJS

575
00:18:57,333 --> 00:18:59,000
的 B100 进行一个相比

576
00:18:59,166 --> 00:19:01,400
B200 跟 B100 的区别在哪

577
00:19:01,566 --> 00:19:02,083
你可以看到

578
00:19:02,083 --> 00:19:04,766
其他其实大部分是相类似的

579
00:19:04,766 --> 00:19:07,050
更多的是我们的算力

580
00:19:07,050 --> 00:19:08,600
可能就不太一样了

581
00:19:08,600 --> 00:19:10,766
算力有些新的增长

582
00:19:10,800 --> 00:19:12,083
那具体芯片是怎么做

583
00:19:12,083 --> 00:19:13,966
网上是没有公布太多的信息

584
00:19:13,966 --> 00:19:15,600
所以 ZOMI 也不了解

585
00:19:15,850 --> 00:19:17,650
还有一些其他额外的信息

586
00:19:17,650 --> 00:19:21,200
就 B100 的算力的是 B200 的大概 4/3 了

587
00:19:21,200 --> 00:19:21,400
所以

588
00:19:21,400 --> 00:19:24,650
他不仅是简单的一片芯粒那么简单

589
00:19:24,650 --> 00:19:26,366
还是两片芯粒那么简单

590
00:19:26,366 --> 00:19:28,050
他可能内部做了一些阉割

591
00:19:28,050 --> 00:19:29,200
还是其他情况

592
00:19:29,200 --> 00:19:31,366
ZOMI 觉得很难去猜哦

593
00:19:31,600 --> 00:19:32,800
然后其他算力的情况

594
00:19:32,800 --> 00:19:34,733
大家也可以简单的看一看了

595
00:19:34,733 --> 00:19:35,450
整个 B100

596
00:19:35,450 --> 00:19:37,000
相当于单个 B200 的系数

597
00:19:37,000 --> 00:19:39,250
那 P16 是算力的 4 点多倍了

598
00:19:39,250 --> 00:19:41,333
那 Blackwell 里面的 tensorcore

599
00:19:41,333 --> 00:19:42,000
很有意思的

600
00:19:42,000 --> 00:19:46,200
就是增加了 FP6 跟 FP4 的相关的支持

601
00:19:46,200 --> 00:19:46,933
从上面那个图

602
00:19:46,933 --> 00:19:47,933
我们也可以看到

603
00:19:47,966 --> 00:19:49,483
整个 FP 的算力

604
00:19:49,483 --> 00:19:52,200
FP4 的算力是 FP8 算力的两倍

605
00:19:52,250 --> 00:19:54,200
是 FP16 算力的四倍

606
00:19:54,200 --> 00:19:55,733
所以英伟达在这方面

607
00:19:55,733 --> 00:19:58,483
从它的新的一些数据进入格式来看

608
00:19:58,483 --> 00:20:00,566
它在推从他自己

609
00:20:00,566 --> 00:20:03,533
更低精度的浮点运算

610
00:20:03,533 --> 00:20:05,600
而 Blackwell 的 CPU 里面的扩大扩里面

611
00:20:05,600 --> 00:20:07,200
不再支持 INT8 类

612
00:20:07,200 --> 00:20:09,650
就是我不是在给你做各种各样的

613
00:20:09,650 --> 00:20:11,283
所谓的简单的量化的

614
00:20:11,283 --> 00:20:14,850
我要做更低精度的数据的格式

615
00:20:15,166 --> 00:20:17,766
这个就是从他的一些相关的信息

616
00:20:17,766 --> 00:20:19,600
能够猜测出来的

617
00:20:20,400 --> 00:20:22,400
好不容易挤了好多的废话

618
00:20:22,400 --> 00:20:23,966
我们现在来到了第四个内容

619
00:20:23,966 --> 00:20:25,683
总结和思考

620
00:20:25,683 --> 00:20:26,566
说实话

621
00:20:26,600 --> 00:20:27,533
这一期视频

622
00:20:27,533 --> 00:20:28,850
会比上一期视频

623
00:20:28,883 --> 00:20:31,000
稍微更深入了一点点

624
00:20:31,000 --> 00:20:33,000
从它的一个 SuperChip

625
00:20:33,000 --> 00:20:34,650
跟那个 Grace 的 SuperChip

626
00:20:34,650 --> 00:20:36,483
组成一个具体的 wack

627
00:20:36,600 --> 00:20:39,483
然后由一个 Rack 组成一个 track

628
00:20:39,600 --> 00:20:41,766
从一个 track 组成一个 Trays

629
00:20:41,966 --> 00:20:44,250
那从 Trays 组成一个 SuperPod

630
00:20:44,333 --> 00:20:46,933
那可以看到里面的命名还是非常的多

631
00:20:46,933 --> 00:20:47,766
非常的繁杂

632
00:20:47,766 --> 00:20:50,050
总比已经一个个跟大家介绍完了

633
00:20:50,050 --> 00:20:51,050
那今天的内容

634
00:20:51,050 --> 00:20:52,000
就先到这里为止

635
00:20:52,000 --> 00:20:52,533
谢谢各位

636
00:20:52,533 --> 00:20:53,366
拜了个拜

