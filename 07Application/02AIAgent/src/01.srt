1
00:00:00,000 --> 00:00:02,400
内容/录制:Z0MI 酱，视频后期/字幕:梁嘉铭

2
00:00:02,400 --> 00:00:03,066
hello 大家好

3
00:00:03,100 --> 00:00:05,100
我是那个一寸光阴一寸金

4
00:00:05,100 --> 00:00:07,800
假期没了我伤心的 ZOMI

5
00:00:11,433 --> 00:00:13,700
今天我们来到了一个新的内容了

6
00:00:13,733 --> 00:00:15,033
或者跟大家一起去唠一唠

7
00:00:15,033 --> 00:00:16,433
最近很多人问 ZOMI

8
00:00:16,433 --> 00:00:17,600
到底这个是什么东西

9
00:00:17,600 --> 00:00:20,366
有什么值得可以去讨论的

10
00:00:20,433 --> 00:00:22,100
这是所谓的 MCP

11
00:00:22,133 --> 00:00:23,033
model context

12
00:00:23,233 --> 00:00:26,100
portocal 模型上下文的一个协议

13
00:00:26,133 --> 00:00:28,333
我们今天主要是分开两个内容

14
00:00:28,333 --> 00:00:29,833
或者我们这个 MCP

15
00:00:29,833 --> 00:00:33,266
会分开 4 节视频跟大家一起去分享的

16
00:00:33,300 --> 00:00:35,366
首先我们来到了 MCP

17
00:00:35,366 --> 00:00:36,900
还是关心几个问题

18
00:00:36,933 --> 00:00:38,566
这个就是 AI Agent 的时代

19
00:00:38,566 --> 00:00:40,200
AI 的超级应用没有来

20
00:00:40,200 --> 00:00:41,433
并没有火

21
00:00:41,433 --> 00:00:44,366
为什么火的是一个 MCP 的一个协议

22
00:00:44,366 --> 00:00:46,700
到底协议有那么的重要吗

23
00:00:47,133 --> 00:00:47,733
第二个问题

24
00:00:47,733 --> 00:00:51,933
就是到底现在的大语言模型加 API

25
00:00:51,933 --> 00:00:53,100
或者大语言模型

26
00:00:53,100 --> 00:00:55,000
去做一些 Function Call 不够用吗

27
00:00:55,000 --> 00:00:57,500
为什么需要一个独立的 MCP 协议

28
00:00:57,533 --> 00:00:58,333
出来

29
00:00:58,633 --> 00:01:01,566
那我们之前其实还是会经常的说到

30
00:01:01,566 --> 00:01:02,833
在 IT 的时代

31
00:01:02,833 --> 00:01:04,833
我们是先协议后生态

32
00:01:04,833 --> 00:01:06,366
就像我们在华为

33
00:01:06,366 --> 00:01:07,266
卖一些硬件的

34
00:01:07,300 --> 00:01:08,300
卖一些盒子

35
00:01:08,300 --> 00:01:10,166
我们肯定是有了 2G 3G

36
00:01:10,166 --> 00:01:12,266
4G 甚至 5G 的一些标准

37
00:01:12,300 --> 00:01:14,733
之后我们有了相关的协议标准

38
00:01:14,733 --> 00:01:15,800
然后再做生态

39
00:01:15,800 --> 00:01:16,866
再做硬件的

40
00:01:16,900 --> 00:01:18,233
但是在 CT 产业

41
00:01:18,233 --> 00:01:19,833
我们说 AI 英伟达

42
00:01:19,833 --> 00:01:21,400
它是没有标准的

43
00:01:21,400 --> 00:01:23,433
都是模型爆发式的增长的

44
00:01:23,433 --> 00:01:25,200
所以说在整个 CT 产业

45
00:01:25,200 --> 00:01:27,433
是先生态再有协议

46
00:01:27,566 --> 00:01:30,333
但是为什么 AI Agent 这个领域

47
00:01:30,333 --> 00:01:31,233
这么的奇怪

48
00:01:31,233 --> 00:01:32,966
先有协议？

49
00:01:32,966 --> 00:01:35,000
AI Agent 或者我们的应用都没

50
00:01:35,000 --> 00:01:37,100
有来为什么会先有协议

51
00:01:37,133 --> 00:01:39,633
那这个问题很值得大家一起去深思

52
00:01:39,633 --> 00:01:42,300
也是我经常会问其他的小伙伴的

53
00:01:42,433 --> 00:01:43,033
那还有

54
00:01:43,033 --> 00:01:43,633
第五个问题

55
00:01:43,633 --> 00:01:46,033
就是到底什么样的软件和系统

56
00:01:46,033 --> 00:01:48,466
适合我们进行 MCP 的封装

57
00:01:48,500 --> 00:01:49,600
什么不适合

58
00:01:49,600 --> 00:01:52,633
也就是我们在什么情况下应该用 MCP

59
00:01:52,633 --> 00:01:55,133
在什么情况下不用 MCP

60
00:01:55,166 --> 00:01:56,433
那最后一个问题

61
00:01:56,433 --> 00:01:58,200
到底我们 MCP

62
00:01:58,200 --> 00:01:59,466
上面也讲了那么多

63
00:01:59,500 --> 00:02:00,700
也思考了那么多

64
00:02:00,700 --> 00:02:03,300
我们的 MCP 到底是个革命性的产品

65
00:02:03,300 --> 00:02:06,033
还只是个简单的工具

66
00:02:06,233 --> 00:02:07,500
我们带着这些疑问

67
00:02:07,533 --> 00:02:10,600
往下一起去了解相关的内容

68
00:02:11,766 --> 00:02:13,833
现在我们来看一下一个网上

69
00:02:13,833 --> 00:02:14,566
很多人都说了

70
00:02:14,566 --> 00:02:15,433
初看 MCP

71
00:02:15,433 --> 00:02:16,500
它是一个协议

72
00:02:16,533 --> 00:02:18,100
但是再看 MCP

73
00:02:18,100 --> 00:02:20,533
觉得它是一个商业的新的模式

74
00:02:20,700 --> 00:02:22,700
第三次看 MCP

75
00:02:22,700 --> 00:02:25,600
觉得它应该是争夺 AI 的应用入口

76
00:02:25,600 --> 00:02:26,233
那 ZOMI

77
00:02:26,233 --> 00:02:27,300
就带着这些疑问

78
00:02:27,333 --> 00:02:28,633
还有带着这些观点

79
00:02:28,633 --> 00:02:30,866
跟大家一起去往下去打开的

80
00:02:30,900 --> 00:02:31,233
首先

81
00:02:31,233 --> 00:02:33,766
我们看一下 MCP 的相关的资源

82
00:02:33,933 --> 00:02:36,166
在 2024 年 11 月份的时候

83
00:02:36,166 --> 00:02:36,866
anthorpic

84
00:02:36,900 --> 00:02:40,300
就发布了一个 MCP 的一个相关的协议

85
00:02:40,300 --> 00:02:41,366
那我们现在

86
00:02:41,366 --> 00:02:43,433
打开对应的官网来看一下

87
00:02:43,433 --> 00:02:47,000
整体来说这里面就 introduction to the MCP

88
00:02:47,000 --> 00:02:49,233
也是 20211 年的 11 月份的时候发布的

89
00:02:49,233 --> 00:02:49,800
然后里面

90
00:02:49,800 --> 00:02:52,100
就讲了 MCP 到底是个什么东西

91
00:02:52,133 --> 00:02:53,133
还有 Getting start

92
00:02:53,133 --> 00:02:54,766
然后就里面就讲到了

93
00:02:54,766 --> 00:02:55,266
主要

94
00:02:55,300 --> 00:02:57,933
是给他的一个 Claude 的一个大模型

95
00:02:57,966 --> 00:03:00,366
做一些相关的工具去使用的

96
00:03:00,400 --> 00:03:02,300
你可以 follow 他们的一个 quicks start guide

97
00:03:02,300 --> 00:03:03,733
进行

98
00:03:03,733 --> 00:03:06,200
一个 MCP 的协议的撰写

99
00:03:06,200 --> 00:03:06,700
那另外的话

100
00:03:06,733 --> 00:03:07,366
我们可以看到

101
00:03:07,366 --> 00:03:10,766
还有整个 MCP 的一个专门的组织

102
00:03:10,766 --> 00:03:11,966
贡献出来了

103
00:03:11,966 --> 00:03:13,366
然后这里面的 MCP 的组织

104
00:03:13,366 --> 00:03:14,100
也蛮有意思

105
00:03:14,133 --> 00:03:16,366
就是有非常多的 SDK

106
00:03:16,366 --> 00:03:17,033
有 Python

107
00:03:17,033 --> 00:03:19,466
Java 还有 Kotlin C#

108
00:03:19,500 --> 00:03:21,433
还有 Python 相关的 SDK

109
00:03:21,433 --> 00:03:23,100
SDK 还是非常的丰富

110
00:03:23,133 --> 00:03:23,700
而这里面

111
00:03:23,700 --> 00:03:24,833
有非常多的内容

112
00:03:24,833 --> 00:03:25,900
ZOMI 觉得比较有意思的

113
00:03:25,933 --> 00:03:28,033
就是 MCP 的 service

114
00:03:28,033 --> 00:03:28,600
这个仓

115
00:03:28,600 --> 00:03:29,400
这里面的仓

116
00:03:29,400 --> 00:03:31,066
就告诉我们整个 MCP

117
00:03:31,100 --> 00:03:33,833
我们现在可以用的工具库

118
00:03:33,833 --> 00:03:35,166
到底有哪些

119
00:03:35,166 --> 00:03:36,200
我们可以用的内容

120
00:03:36,200 --> 00:03:37,100
非常的多

121
00:03:37,133 --> 00:03:38,366
这里面已经上到了

122
00:03:38,366 --> 00:03:40,433
500 多个相关的工具了

123
00:03:40,433 --> 00:03:42,066
所以整个 MCP 的内容

124
00:03:42,100 --> 00:03:43,800
已经非常的丰富

125
00:03:44,333 --> 00:03:45,900
回到我们的对应的 PPT

126
00:03:45,900 --> 00:03:46,633
我们可以看到

127
00:03:46,633 --> 00:03:48,433
MCP 刚才的相关的资源

128
00:03:48,433 --> 00:03:50,100
是非常的丰富的

129
00:03:50,133 --> 00:03:52,566
那我们在整个浏览完之后

130
00:03:52,566 --> 00:03:55,300
其实 ZOMI 来说起一个简单的摘录

131
00:03:55,333 --> 00:03:56,766
MCP 的主要的目的

132
00:03:56,766 --> 00:03:59,233
就是通过大语言模型

133
00:03:59,233 --> 00:04:00,600
我们的 AI Agent

134
00:04:00,600 --> 00:04:01,800
或者我们的大模型

135
00:04:01,800 --> 00:04:05,500
使用外部的工具来完成特定的任务

136
00:04:05,533 --> 00:04:06,366
这个看上去

137
00:04:06,366 --> 00:04:08,633
跟我们以前的 function call 或者 AI Agent

138
00:04:08,633 --> 00:04:10,433
没有太多的新的变化

139
00:04:10,433 --> 00:04:11,366
更多的是

140
00:04:11,366 --> 00:04:14,466
是通过一个规定的一个方案

141
00:04:14,500 --> 00:04:17,200
就让我们的整个大模型调工具

142
00:04:17,200 --> 00:04:18,966
更加方便而已

143
00:04:18,966 --> 00:04:19,700
更加方便

144
00:04:19,733 --> 00:04:21,233
所以在 ZOMI 眼中

145
00:04:21,233 --> 00:04:22,800
它应该是一个相对保守的概念

146
00:04:22,800 --> 00:04:23,966
没有太多新的东西

147
00:04:23,966 --> 00:04:24,266
于是

148
00:04:24,300 --> 00:04:26,900
我们将会对 MCP 进行一个简单的思考

149
00:04:26,900 --> 00:04:29,300
的那在整一期视频里面

150
00:04:29,300 --> 00:04:30,966
在这里面的 20 分钟的 ZOMI 会

151
00:04:30,966 --> 00:04:32,833
跟大家一起去分享四个内容

152
00:04:32,833 --> 00:04:34,900
第一个我们看一下 MCP 的一个基础

153
00:04:34,933 --> 00:04:35,200
第二个

154
00:04:35,200 --> 00:04:37,466
我们看一下 OpenAI 推出的 Function call

155
00:04:37,500 --> 00:04:38,833
到底为什么不行

156
00:04:38,833 --> 00:04:40,966
为什么需要出现 MCP

157
00:04:40,966 --> 00:04:41,966
于是就来到了

158
00:04:41,966 --> 00:04:43,300
我们为什么会出现 MCP

159
00:04:43,333 --> 00:04:46,000
跟 MCP 是什么深入的去打开一下

160
00:04:46,000 --> 00:04:48,666
接着我们重点玩一玩整个 MCP

161
00:04:48,700 --> 00:04:49,966
做一个简单的小 demo

162
00:04:49,966 --> 00:04:52,966
让大家亲自去体验什么是 MCP

163
00:04:52,966 --> 00:04:55,166
为什么会觉得 MCP 很神很神奇

164
00:04:55,166 --> 00:04:57,566
还有真正的让大家了解一下 MCP

165
00:04:57,566 --> 00:04:58,100
最后就是

166
00:04:58,133 --> 00:05:01,200
ZOMI 对整个 MCP 的一个相关的思考了

167
00:05:02,033 --> 00:05:02,966
首先第一个内容

168
00:05:02,966 --> 00:05:05,633
我们看一下 MCP 的一个具体的出现

169
00:05:05,633 --> 00:05:06,166
蛮有意思的

170
00:05:06,166 --> 00:05:10,433
刚才讲到了在 20211 年的 11 月份的时候

171
00:05:10,433 --> 00:05:13,466
Anthropic 就介绍了自己推出了一个 MCP

172
00:05:13,466 --> 00:05:16,300
专门针对他的一个 claude 的模型

173
00:05:16,333 --> 00:05:16,900
那同样

174
00:05:16,900 --> 00:05:18,100
右边的这个 claude 的模型

175
00:05:18,100 --> 00:05:19,733
可以调非常多的工具

176
00:05:19,733 --> 00:05:21,333
通过一个中间的一条线

177
00:05:21,333 --> 00:05:23,233
这条线就是所谓的 MCP 的一个

178
00:05:23,233 --> 00:05:24,833
这是他的一个 logo 了

179
00:05:24,833 --> 00:05:25,600
那整体来说

180
00:05:25,600 --> 00:05:27,500
MCP 定义了应用程序

181
00:05:27,533 --> 00:05:28,600
就 APP

182
00:05:28,600 --> 00:05:30,266
跟大语言模型之间的

183
00:05:30,300 --> 00:05:32,433
一个上下文的交互的关系

184
00:05:32,433 --> 00:05:33,366
因为我们知道

185
00:05:33,366 --> 00:05:35,100
大语言模型能够进行思考

186
00:05:35,133 --> 00:05:36,533
但是它不能够执行

187
00:05:36,533 --> 00:05:37,500
它执行的时候

188
00:05:37,500 --> 00:05:39,566
需要靠我们很多的应用程序

189
00:05:39,566 --> 00:05:41,666
去给它提供对应的服务的

190
00:05:41,700 --> 00:05:43,800
那为了使这里面的上下文的信息

191
00:05:43,800 --> 00:05:45,266
也就是所谓的 context

192
00:05:45,300 --> 00:05:47,000
交互的更加方便

193
00:05:47,000 --> 00:05:50,366
对就开发出了一个中间的协议层了

194
00:05:50,366 --> 00:05:51,566
就好像说 USB

195
00:05:51,566 --> 00:05:53,500
我们可以通过一个 type c

196
00:05:53,533 --> 00:05:54,633
让很多的设备

197
00:05:54,633 --> 00:05:56,566
接进去我们的电脑一样

198
00:05:56,566 --> 00:05:57,866
所以说 MCP

199
00:05:57,900 --> 00:06:00,033
相对来说还是比较简单的

200
00:06:00,033 --> 00:06:02,166
那我们看一下整个 MCP 的目的

201
00:06:02,166 --> 00:06:03,000
刚才也讲到了

202
00:06:03,000 --> 00:06:04,233
非常的纯粹

203
00:06:04,233 --> 00:06:06,300
创建一个通用的标准

204
00:06:06,466 --> 00:06:08,166
然后使得我们的一些 APP

205
00:06:08,166 --> 00:06:10,566
也就是下面的这些应用程序的开发

206
00:06:10,566 --> 00:06:14,033
集成变得更加简单和统一

207
00:06:14,100 --> 00:06:15,733
那在没有 MCP 之前

208
00:06:15,733 --> 00:06:18,300
我们可以看到这是 a 大模型

209
00:06:18,300 --> 00:06:19,600
这是 b 大模型

210
00:06:19,600 --> 00:06:21,033
这是 c 大模型

211
00:06:21,033 --> 00:06:23,166
当然我们的工具有非常的多

212
00:06:23,200 --> 00:06:24,800
如果用 Function call 或者用其他方式

213
00:06:24,800 --> 00:06:26,266
我每一个大模型

214
00:06:26,300 --> 00:06:27,633
都需要单独的去调用

215
00:06:27,633 --> 00:06:29,600
不同的这些所谓的 APP

216
00:06:29,600 --> 00:06:31,600
所以在 without MCP 的时候

217
00:06:31,600 --> 00:06:32,900
你会发现我们的应用

218
00:06:32,933 --> 00:06:35,400
跟我们的一些大模型结合起来

219
00:06:35,400 --> 00:06:36,966
还是要写很多的代码

220
00:06:36,966 --> 00:06:37,766
比较麻烦

221
00:06:37,766 --> 00:06:40,200
但是为什么 ZOMI 会相对保守的

222
00:06:40,200 --> 00:06:41,433
跟 MCP 这个东西

223
00:06:41,566 --> 00:06:43,366
大家可以看到它的应用的方式

224
00:06:43,366 --> 00:06:45,700
或者它的应用的模式是没有变化的

225
00:06:45,733 --> 00:06:47,633
只是更加方便了

226
00:06:47,633 --> 00:06:49,866
可能会更好的促进我们整个产业

227
00:06:49,900 --> 00:06:51,166
或者 AIAgent 的发展

228
00:06:51,166 --> 00:06:53,766
但是 AIAgent 的本质它没有改变

229
00:06:53,933 --> 00:06:54,333
那接着

230
00:06:54,333 --> 00:06:55,533
我们看一下右边

231
00:06:55,533 --> 00:06:57,133
有了 MCP 之后

232
00:06:57,133 --> 00:06:59,200
可以看到不管是 a 的大模型

233
00:06:59,200 --> 00:07:01,400
b 的大模型还是 c 的大模型

234
00:07:01,400 --> 00:07:03,966
我们都通过一个统一的 MCP

235
00:07:04,366 --> 00:07:07,433
进行连接到不同的 APP 上面

236
00:07:07,433 --> 00:07:08,833
更加简单更加方便了

237
00:07:08,833 --> 00:07:12,700
所以说提供了一个统一的标准的接口

238
00:07:12,733 --> 00:07:14,500
对应我们的大语言模型

239
00:07:14,500 --> 00:07:16,633
跟我们的应用之间的通路

240
00:07:17,766 --> 00:07:18,766
那这里面

241
00:07:18,766 --> 00:07:19,833
就说到 a k a

242
00:07:19,833 --> 00:07:21,100
举个具体的例子

243
00:07:21,133 --> 00:07:22,133
你会发现

244
00:07:22,166 --> 00:07:24,400
以前在大模型没有来临的时代

245
00:07:24,400 --> 00:07:26,033
我们的 AI 的训练框架

246
00:07:26,033 --> 00:07:27,566
有非常多 Pytorch Tensorflow

247
00:07:27,566 --> 00:07:28,566
Keras Mxnet

248
00:07:28,566 --> 00:07:29,400
还有 mindspore

249
00:07:29,400 --> 00:07:30,900
各种各样的 AI 框架

250
00:07:31,000 --> 00:07:31,633
那中间

251
00:07:31,633 --> 00:07:34,200
就可以通过一个 ONNX 的一个相关的

252
00:07:34,233 --> 00:07:35,666
中间的所谓的 IR

253
00:07:35,700 --> 00:07:38,366
其实它也可以作为一种标准的协议

254
00:07:38,366 --> 00:07:39,466
通过单一的协议

255
00:07:39,500 --> 00:07:42,833
可能导流到另外一些端侧的推理引擎

256
00:07:42,833 --> 00:07:44,066
或者其他的设备上面

257
00:07:44,100 --> 00:07:47,766
那这个就是当年的一个 AI 模型的 IR

258
00:07:47,800 --> 00:07:49,300
那反观回来

259
00:07:49,333 --> 00:07:52,566
现在的 MCP 是不是也特别的像

260
00:07:52,566 --> 00:07:55,633
那现在有多少人还在提 ONNX

261
00:07:55,633 --> 00:07:58,000
其实 ONNX 已经成为一种事实标准了

262
00:07:58,000 --> 00:07:58,900
大家都用

263
00:07:58,933 --> 00:08:01,533
但是它没有改变我们的 AI 的本质

264
00:08:01,733 --> 00:08:02,833
改变 AI 的本质

265
00:08:02,833 --> 00:08:05,166
是我们的大模型的时代的来临

266
00:08:05,166 --> 00:08:06,766
所以说 MCP

267
00:08:06,800 --> 00:08:07,633
那 ZOMI

268
00:08:07,633 --> 00:08:08,600
总结留到最后了

269
00:08:08,600 --> 00:08:10,266
我们现在往下进行看

270
00:08:11,766 --> 00:08:13,233
在真正了解 MCP 之前

271
00:08:13,233 --> 00:08:14,900
我们看一下什么叫做 Function Call

272
00:08:14,933 --> 00:08:15,833
函数调用

273
00:08:15,833 --> 00:08:17,366
所谓的 Function Call 这个内容

274
00:08:17,366 --> 00:08:19,266
实际上是 OpenAI

275
00:08:19,300 --> 00:08:21,400
在 2023 年的时候提出来的

276
00:08:21,633 --> 00:08:22,266
本质上

277
00:08:22,300 --> 00:08:24,333
是希望 OpenAI 的一些大模型

278
00:08:24,333 --> 00:08:26,433
跟外部的系统能够快速的

279
00:08:26,433 --> 00:08:27,700
或者外部的工具

280
00:08:27,733 --> 00:08:29,233
能够快速的结合起来

281
00:08:29,233 --> 00:08:30,666
就相当于给大模型

282
00:08:30,700 --> 00:08:32,900
安装了一个外挂的工具箱

283
00:08:32,900 --> 00:08:35,100
toolkit 当大模型遇到

284
00:08:35,100 --> 00:08:36,900
没有办法直接回答问题的时候

285
00:08:36,900 --> 00:08:39,933
就会去调用我们的预定设计好的函数

286
00:08:39,933 --> 00:08:40,833
去调用起来

287
00:08:40,833 --> 00:08:42,900
然后让函数给我们大模型做一些回

288
00:08:42,933 --> 00:08:45,500
答例如我们问大模型

289
00:08:45,500 --> 00:08:46,400
这个 OpenAI 了

290
00:08:46,400 --> 00:08:48,000
就是整个 GPT 的大模型

291
00:08:48,000 --> 00:08:50,866
现在波士顿的天气怎么样

292
00:08:50,900 --> 00:08:51,933
于是 OpenAI

293
00:08:51,933 --> 00:08:55,300
就会去查询有没有相关的 API

294
00:08:55,300 --> 00:08:55,933
有没有相关的

295
00:08:55,933 --> 00:08:58,500
有的话那就会调用相关的 API 的

296
00:08:58,500 --> 00:08:59,566
所谓的 Function Call

297
00:08:59,566 --> 00:09:00,233
然后 Function

298
00:09:00,233 --> 00:09:02,066
就会回答我们这个问题

299
00:09:02,100 --> 00:09:03,033
然后给出来了

300
00:09:03,033 --> 00:09:06,466
当天的一些相关的一个温度

301
00:09:06,500 --> 00:09:07,200
那这种方式

302
00:09:07,200 --> 00:09:08,100
就 Function Call

303
00:09:08,133 --> 00:09:10,300
那我们可以反观回来

304
00:09:10,300 --> 00:09:12,333
我们要开发一个 Function Call 的工具

305
00:09:12,333 --> 00:09:14,233
其实针对不同的模型

306
00:09:14,233 --> 00:09:15,466
a 模型跟 b 模型

307
00:09:15,500 --> 00:09:17,300
都要单独的进行适配

308
00:09:17,300 --> 00:09:18,800
因为每个模型

309
00:09:18,800 --> 00:09:20,366
它的一个输入的参数格式

310
00:09:20,366 --> 00:09:21,166
触发的逻辑

311
00:09:21,166 --> 00:09:23,466
反馈的结构都是不一样的

312
00:09:23,500 --> 00:09:25,533
所以说这个时候你说

313
00:09:25,533 --> 00:09:27,500
如果把所有的这些应用

314
00:09:27,500 --> 00:09:29,333
或者把所有的这些压力

315
00:09:29,333 --> 00:09:30,833
都给到应用厂商去开发

316
00:09:30,833 --> 00:09:33,000
其实应用厂商会叫苦连天

317
00:09:33,000 --> 00:09:34,700
如果给到大模型厂商来开发

318
00:09:34,733 --> 00:09:36,900
大模型厂商也会很困难

319
00:09:36,900 --> 00:09:39,733
因为世界的应用千千万

320
00:09:40,933 --> 00:09:41,766
我们可以看到

321
00:09:41,766 --> 00:09:42,966
Function Call 的方式

322
00:09:42,966 --> 00:09:44,766
是垂直调用的

323
00:09:44,766 --> 00:09:46,033
所以说

324
00:09:46,033 --> 00:09:46,966
开发的门槛

325
00:09:46,966 --> 00:09:48,866
针对 AI Agent 还是比较高的

326
00:09:48,900 --> 00:09:49,933
所以说之前

327
00:09:49,933 --> 00:09:51,933
就出现了很多像 Dify

328
00:09:51,933 --> 00:09:54,566
还有扣子这些相关的平台

329
00:09:54,566 --> 00:09:55,766
大家会利用这些平台

330
00:09:55,766 --> 00:09:59,066
去构建 AI Agent 相关的内容

331
00:09:59,100 --> 00:10:00,133
那我们刚才看到

332
00:10:00,133 --> 00:10:01,800
像火山的自己的扣子

333
00:10:01,800 --> 00:10:03,500
扣子就作为 Function Call

334
00:10:03,533 --> 00:10:05,200
一个非常典型的代表

335
00:10:05,200 --> 00:10:07,666
大家也可以研究一下扣子这个内容

336
00:10:07,700 --> 00:10:10,200
因为确实里面集成了非常多的应用了

337
00:10:10,200 --> 00:10:13,266
那现在有了所谓的 MCP

338
00:10:13,300 --> 00:10:14,200
火山的扣子

339
00:10:14,200 --> 00:10:15,600
也估计要转型了

340
00:10:15,600 --> 00:10:16,800
扩大底层的技术

341
00:10:16,900 --> 00:10:18,100
那简单的总结一下

342
00:10:18,100 --> 00:10:19,000
我们可以看到

343
00:10:19,000 --> 00:10:20,700
整个 Function Call 的一个核心的特点

344
00:10:20,733 --> 00:10:22,633
就是基本上是模型专属的

345
00:10:22,733 --> 00:10:24,533
不同的模型不同的调用规则

346
00:10:24,533 --> 00:10:26,366
因为他没有个统一的标准

347
00:10:26,366 --> 00:10:26,866
那第二个

348
00:10:26,900 --> 00:10:28,433
就是实时触发的

349
00:10:28,433 --> 00:10:29,433
也是解析完之后

350
00:10:29,433 --> 00:10:30,966
就直接调用工具了

351
00:10:30,966 --> 00:10:33,633
没有所谓的什么的架构的问题

352
00:10:33,633 --> 00:10:34,200
那第三个

353
00:10:34,200 --> 00:10:36,166
就是使用非常的简单

354
00:10:36,166 --> 00:10:37,233
功能非常的单一

355
00:10:37,233 --> 00:10:38,233
例如查天气了

356
00:10:38,233 --> 00:10:39,966
调时钟了这些

357
00:10:39,966 --> 00:10:40,866
其实大模型

358
00:10:40,900 --> 00:10:43,300
当时候说他能够进行思考

359
00:10:43,300 --> 00:10:45,500
也他也能够执行一些对应的动作

360
00:10:45,500 --> 00:10:47,333
那这些动作的调用的工具

361
00:10:47,333 --> 00:10:48,533
在 Function Call 的时代

362
00:10:48,533 --> 00:10:49,633
也就是 2023 年的时候

363
00:10:49,633 --> 00:10:51,566
还是相对简单的

364
00:10:51,766 --> 00:10:53,100
那我们看一下所谓的痛点

365
00:10:53,133 --> 00:10:54,366
就是协议碎片化

366
00:10:54,366 --> 00:10:56,466
每一个模型需要单独开发接口

367
00:10:56,500 --> 00:10:58,133
这是我们刚才的模型专属

368
00:10:58,133 --> 00:10:59,600
所引发的问题

369
00:10:59,600 --> 00:11:00,000
另外的话

370
00:11:00,000 --> 00:11:01,566
它功能的扩展

371
00:11:01,566 --> 00:11:02,900
是相对比较难的

372
00:11:02,933 --> 00:11:04,233
因为每新增的工具

373
00:11:04,233 --> 00:11:05,233
每新增的内容

374
00:11:05,233 --> 00:11:07,100
我们都要调整接口

375
00:11:07,133 --> 00:11:08,566
所以说整体来说

376
00:11:08,566 --> 00:11:09,866
整个 Function Call 方式

377
00:11:09,900 --> 00:11:11,566
还是有非常多的局限性的

378
00:11:13,033 --> 00:11:16,466
为了解决刚才讲到的 Function Call 的内容

379
00:11:16,500 --> 00:11:18,766
于是就出现了 MCP

380
00:11:18,766 --> 00:11:20,866
那所谓的 MCP 就是模型

381
00:11:20,900 --> 00:11:23,533
大模型上下文的协议

382
00:11:23,533 --> 00:11:25,000
为什么叫上下文

383
00:11:25,000 --> 00:11:26,700
是因为它整个通讯的方式

384
00:11:26,733 --> 00:11:27,966
是使用 prompt

385
00:11:28,166 --> 00:11:30,366
也就是模型的上下文来去实现的

386
00:11:30,366 --> 00:11:31,866
那我们现在来简单的去

387
00:11:31,900 --> 00:11:33,600
该介绍一下这个概念

388
00:11:33,600 --> 00:11:34,600
首先 MCP

389
00:11:34,600 --> 00:11:36,966
主要是定义了一个统一的规范

390
00:11:36,966 --> 00:11:38,500
不管是我们连接到数据库了

391
00:11:38,533 --> 00:11:39,600
第三方的 API 了

392
00:11:39,600 --> 00:11:40,666
还是其他的工具

393
00:11:40,700 --> 00:11:41,400
外部的资源

394
00:11:41,400 --> 00:11:44,266
都可以通过这个简单的甚至统一

395
00:11:44,300 --> 00:11:46,200
不能说简单的统一的接口

396
00:11:46,200 --> 00:11:48,100
来完成我们的大模型

397
00:11:48,133 --> 00:11:49,300
a 模型 b 模型

398
00:11:49,300 --> 00:11:51,333
DeepSeek Claude 等模型

399
00:11:51,333 --> 00:11:53,700
跟我们外部的工具的一个交互

400
00:11:53,700 --> 00:11:55,166
使得我们的 AI Agent

401
00:11:55,200 --> 00:11:57,100
执行起来更加的标准

402
00:11:57,133 --> 00:11:58,600
并且可以让我们的应用

403
00:11:58,600 --> 00:12:01,833
针对不同的模型进行一个可复用的

404
00:12:02,166 --> 00:12:03,133
那我们看一下

405
00:12:03,133 --> 00:12:04,833
就是整个 MCP 的历史

406
00:12:04,833 --> 00:12:06,433
那在 2024 年的 11 月份

407
00:12:06,433 --> 00:12:09,066
Claude 就正式的就说

408
00:12:09,100 --> 00:12:11,833
他的一个客户端能够支持 MCP 了

409
00:12:11,833 --> 00:12:13,400
然后同期

410
00:12:13,400 --> 00:12:15,900
因为 cursor 跟 Anthropic 走的比较近

411
00:12:15,933 --> 00:12:17,733
也相关的有投资

412
00:12:17,733 --> 00:12:18,800
所以说整体来说

413
00:12:18,800 --> 00:12:20,366
马上支持 MCP 了

414
00:12:20,366 --> 00:12:22,100
那真正 MCP 在国内带火的

415
00:12:22,133 --> 00:12:23,033
或者全球带火了

416
00:12:23,033 --> 00:12:25,233
是因为 2025 年的 3 月份

417
00:12:25,233 --> 00:12:26,833
AI Agent 的一个概念股

418
00:12:26,833 --> 00:12:29,633
或者他们一个非常重要的一个 manus

419
00:12:29,666 --> 00:12:30,833
就带火了整个 MCP

420
00:12:30,833 --> 00:12:31,433
因为

421
00:12:31,433 --> 00:12:33,866
为了快速的去集成相关的工具

422
00:12:33,900 --> 00:12:34,800
他用了 MCP

423
00:12:34,800 --> 00:12:36,066
因为当时 MCP 在国外

424
00:12:36,100 --> 00:12:37,966
已经有很多人进行贡献了

425
00:12:37,966 --> 00:12:40,033
那确实 MCP 火了之后

426
00:12:40,033 --> 00:12:41,666
连奥特曼

427
00:12:41,700 --> 00:12:43,766
也就是 OpenAI 的 CEO 创始人

428
00:12:43,766 --> 00:12:45,500
现在已经成为董事长了

429
00:12:45,633 --> 00:12:46,700
那他也说到了

430
00:12:46,733 --> 00:12:49,500
哎既然大家都很喜欢 MCP

431
00:12:49,500 --> 00:12:50,566
那我们的 OpenAI

432
00:12:50,566 --> 00:12:53,866
也会后面集成相关 MCP 的功能

433
00:12:53,900 --> 00:12:55,400
因此我们可以看到

434
00:12:55,400 --> 00:12:56,833
现在 MCP

435
00:12:56,833 --> 00:13:01,433
已经成为 AI 工具调用的行业标准了

436
00:13:01,433 --> 00:13:02,000
那这里面

437
00:13:02,000 --> 00:13:03,866
我们强调的是 AI 工具

438
00:13:03,900 --> 00:13:05,933
调用的行业标准

439
00:13:06,000 --> 00:13:09,233
所以说为什么会在所谓的 CT 时代

440
00:13:09,233 --> 00:13:10,966
我们居然出现了有协议

441
00:13:10,966 --> 00:13:12,100
再有所谓的生态

442
00:13:12,133 --> 00:13:14,500
是因为我们的硬件或者我们的 AI Agent

443
00:13:14,500 --> 00:13:16,700
已经明确了我们的 AI Agent 的方式

444
00:13:16,700 --> 00:13:18,000
和调用的形态

445
00:13:18,000 --> 00:13:19,566
所以说有了这么一个协议

446
00:13:19,566 --> 00:13:22,166
它可能更好的为整个 AI Agent 的发展

447
00:13:22,166 --> 00:13:24,000
进行一个加速的

448
00:13:24,033 --> 00:13:25,866
那我们可以看到现在

449
00:13:25,900 --> 00:13:26,500
整体来说

450
00:13:26,500 --> 00:13:27,033
开发者

451
00:13:27,033 --> 00:13:28,833
按照 MCP 的协议进行开发了

452
00:13:28,833 --> 00:13:30,466
就不需要为每个模型

453
00:13:30,500 --> 00:13:33,033
进行配置不同的资源和重复的编码

454
00:13:33,033 --> 00:13:35,200
所以说可以节省开发工作量

455
00:13:35,200 --> 00:13:36,233
这个很重要的

456
00:13:36,333 --> 00:13:36,766
另外的话

457
00:13:36,766 --> 00:13:38,800
已经开发出的 MCP 协议

458
00:13:38,800 --> 00:13:40,066
因为协议是通用的

459
00:13:40,100 --> 00:13:43,200
我们可以就是进行尽可能的复用

460
00:13:43,200 --> 00:13:45,300
那这个就是 MCP 的一个优点

461
00:13:45,333 --> 00:13:45,800
同样的

462
00:13:45,800 --> 00:13:47,833
我们可以看一下 MCP 的其他的特点

463
00:13:47,833 --> 00:13:48,100
第一个

464
00:13:48,133 --> 00:13:49,766
就是协议的标准化

465
00:13:49,766 --> 00:13:51,100
还有生态很兼容

466
00:13:51,133 --> 00:13:52,700
还有动态扩展

467
00:13:52,700 --> 00:13:54,800
那这些都是刚才已经讲到过的

468
00:13:54,800 --> 00:13:57,266
它最核心的其实解决了 3 大问题

469
00:13:57,300 --> 00:13:57,600
第一个

470
00:13:57,600 --> 00:13:59,900
就是所谓的数据孤岛的问题

471
00:13:59,933 --> 00:14:02,700
打破了可能本地跟云端的数据源

472
00:14:02,700 --> 00:14:03,133
那这个

473
00:14:03,133 --> 00:14:03,733
ZOMI 等一下

474
00:14:03,733 --> 00:14:06,433
会用一个 file system 作为一个 demo 例子

475
00:14:06,433 --> 00:14:07,366
让大家看一下

476
00:14:07,366 --> 00:14:09,566
什么所谓的打破了数据孤岛

477
00:14:09,600 --> 00:14:10,033
那第二个

478
00:14:10,033 --> 00:14:11,033
就刚才讲到的

479
00:14:11,033 --> 00:14:13,700
减少了我们的代码的重复的开发

480
00:14:13,733 --> 00:14:15,800
反正我所有的应用工具

481
00:14:15,800 --> 00:14:18,466
都只要需要适配 MCP 就可以了

482
00:14:18,466 --> 00:14:19,100
那这样的话

483
00:14:19,133 --> 00:14:21,566
使得我们整个 AI 的生态的割据

484
00:14:21,566 --> 00:14:24,100
可以形成一个统一的工具市场

485
00:14:24,133 --> 00:14:26,900
所谓 Toolkit 的一个 marketing

486
00:14:27,000 --> 00:14:27,233
那这

487
00:14:27,233 --> 00:14:30,466
个就是整个 MCP 的一个所谓的好处了

488
00:14:30,533 --> 00:14:31,833
同样我们还在这里面

489
00:14:31,833 --> 00:14:34,500
还是要对比一下 MCP 跟一个 Function Call 的

490
00:14:34,533 --> 00:14:35,633
有兴趣的小伙伴

491
00:14:35,633 --> 00:14:37,866
可以看一下下面的内容

492
00:14:39,300 --> 00:14:41,233
但是在 ZOMI 角度来说

493
00:14:41,233 --> 00:14:44,100
其实更直观的就是有了 MCP 之后

494
00:14:44,133 --> 00:14:45,533
确实我们的模型

495
00:14:45,533 --> 00:14:48,100
或者我们的 AI Agent 的模型调用工具

496
00:14:48,100 --> 00:14:51,766
会变得更加的简单和轻量化

497
00:14:57,600 --> 00:14:58,300
讲了这么多

498
00:14:58,300 --> 00:14:59,033
其实 ZOMI 一开始

499
00:14:59,033 --> 00:15:01,633
看了网上很多的文章和案例

500
00:15:01,633 --> 00:15:04,200
其实都不太理解到底 MCP 能干什么

501
00:15:04,200 --> 00:15:07,166
就反正看他的上面的概念很粗

502
00:15:07,200 --> 00:15:08,433
于是 ZOMI 在这里面

503
00:15:08,433 --> 00:15:09,833
就做了一个简单的 demo

504
00:15:09,833 --> 00:15:11,066
跟大家一起去体验一下

505
00:15:11,100 --> 00:15:14,166
到底 MCP 到底能做什么工作

506
00:15:15,333 --> 00:15:15,833
首先

507
00:15:15,833 --> 00:15:18,800
我们来下载一个具体的一个客户端的

508
00:15:18,800 --> 00:15:20,166
所谓的 Cherry studio

509
00:15:20,166 --> 00:15:21,100
这个 Cherry studio

510
00:15:21,133 --> 00:15:24,100
里面集成了非常多不同的大模型

511
00:15:24,100 --> 00:15:25,700
和相关的工具

512
00:15:25,700 --> 00:15:26,333
那这里面

513
00:15:26,333 --> 00:15:26,566
ZOMI

514
00:15:26,566 --> 00:15:29,900
就简单的打开我们的一个 Cherry studio

515
00:15:29,933 --> 00:15:30,966
那 Cherry studio 里面

516
00:15:30,966 --> 00:15:32,566
我就集成了一个 Deepseek V3 的

517
00:15:32,566 --> 00:15:33,766
一个具体的模型

518
00:15:33,766 --> 00:15:34,266
那这里面

519
00:15:34,300 --> 00:15:36,133
我选择一个模型

520
00:15:36,133 --> 00:15:39,700
模型选择一个千问 2.5 7B instruct 吧

521
00:15:39,800 --> 00:15:41,966
然后简单问他一个问题

522
00:15:41,966 --> 00:15:43,700
这个问题叫做

523
00:15:44,100 --> 00:15:47,800
请您帮我在桌面上

524
00:15:47,966 --> 00:15:53,266
创建一个叫做 MCP 学习的文件夹

525
00:15:53,833 --> 00:15:57,166
我叫他帮我在桌面上创建一个文件夹

526
00:15:57,166 --> 00:15:58,266
的一个简单的内容

527
00:15:58,300 --> 00:15:59,433
我们可以看一下

528
00:15:59,433 --> 00:16:03,100
整个千问 2.5 7B 的模型的回答是怎么样

529
00:16:03,233 --> 00:16:05,866
哎他告诉我你可以第一步干什么

530
00:16:05,933 --> 00:16:07,600
第二步干什么

531
00:16:07,733 --> 00:16:09,366
第三步干什么

532
00:16:09,500 --> 00:16:09,833
嗯有

533
00:16:09,833 --> 00:16:11,000
点无聊反正

534
00:16:11,000 --> 00:16:12,866
我只是希望我们的大模型的

535
00:16:12,900 --> 00:16:14,233
帮我们完成这个工作

536
00:16:14,233 --> 00:16:16,400
哎他为了帮我完成这个工作

537
00:16:16,400 --> 00:16:18,766
还给我一段代码让我去执行的

538
00:16:18,766 --> 00:16:21,500
那我不可能说我就直接把这段代码

539
00:16:22,200 --> 00:16:24,200
粘到我这个终端上面去执行

540
00:16:24,200 --> 00:16:25,066
因为大部分人

541
00:16:25,100 --> 00:16:26,500
或者大部分真正用 Agent 的人

542
00:16:26,500 --> 00:16:28,233
其实不希望写代码的

543
00:16:28,233 --> 00:16:30,566
所以我们回到整个这个内容里面

544
00:16:30,566 --> 00:16:32,766
我们现在来添加一个 MCP

545
00:16:32,766 --> 00:16:33,366
那这里面

546
00:16:33,366 --> 00:16:34,233
点击设置

547
00:16:34,233 --> 00:16:35,866
然后 MCP 服务器

548
00:16:35,900 --> 00:16:36,366
那这里面

549
00:16:36,366 --> 00:16:38,366
ZOMI 已经提前去设置好了

550
00:16:38,366 --> 00:16:40,366
大家想去设计也比较简单了

551
00:16:40,366 --> 00:16:42,500
因为这个是 MCP 的一个所谓的

552
00:16:42,533 --> 00:16:43,000
相关设置

553
00:16:43,000 --> 00:16:44,833
的协议添加服务

554
00:16:44,833 --> 00:16:46,200
然后找到对应的

555
00:16:46,200 --> 00:16:47,066
不对不对

556
00:16:47,133 --> 00:16:48,433
应该是搜索 MCP

557
00:16:48,433 --> 00:16:49,833
然后找到你对应的

558
00:16:49,833 --> 00:16:51,866
想要的一个 MCP 的 service

559
00:16:51,900 --> 00:16:52,766
就可以了

560
00:16:52,766 --> 00:16:54,066
那添加完之后

561
00:16:54,100 --> 00:16:56,133
这里面刚才不小心打开错了

562
00:16:56,133 --> 00:16:57,500
那我们添加完之后

563
00:16:57,500 --> 00:16:59,533
很重要的就是选择可能

564
00:16:59,533 --> 00:17:00,966
所谓的标准的输出类型了

565
00:17:00,966 --> 00:17:02,433
现在我用的是本地的

566
00:17:02,433 --> 00:17:05,433
所以我想用的是标准的 STIO

567
00:17:05,433 --> 00:17:06,900
有了标准 STIO 之后

568
00:17:06,933 --> 00:17:09,833
就告诉这个协议里面的参数了

569
00:17:09,833 --> 00:17:11,100
我的一个桌面

570
00:17:11,133 --> 00:17:12,733
到底是一个什么样的情况

571
00:17:12,733 --> 00:17:13,166
就这个

572
00:17:13,166 --> 00:17:14,866
就是我桌面的地址了

573
00:17:14,900 --> 00:17:15,433
那现在

574
00:17:15,433 --> 00:17:16,866
我回到一个对话里面

575
00:17:16,900 --> 00:17:18,733
设置好我的 MCP 协议之后

576
00:17:18,733 --> 00:17:20,433
点击这个 MCP 协议

577
00:17:20,433 --> 00:17:21,366
选择这玩意

578
00:17:21,366 --> 00:17:22,400
哎绿了

579
00:17:22,400 --> 00:17:23,066
那接下来

580
00:17:23,100 --> 00:17:25,333
我们做一个同样的动作

581
00:17:26,633 --> 00:17:28,233
请帮我在桌面上

582
00:17:28,233 --> 00:17:32,266
请帮我使用 file

583
00:17:33,100 --> 00:17:34,400
那刚才的 manager

584
00:17:34,400 --> 00:17:37,866
我们叫做 file system

585
00:17:38,200 --> 00:17:38,966
在桌面上

586
00:17:38,966 --> 00:17:42,266
创建一个叫做 MCP 学习的文件夹

587
00:17:42,300 --> 00:17:43,800
然后点击你会发现

588
00:17:43,833 --> 00:17:44,500
哎转了

589
00:17:44,533 --> 00:17:45,533
转了转

590
00:17:47,200 --> 00:17:49,833
哎发现它已经完成了

591
00:17:49,833 --> 00:17:51,033
太好了已经完成了

592
00:17:51,033 --> 00:17:52,433
告诉我已经 OK 了

593
00:17:53,800 --> 00:17:54,800
那已经创建完

594
00:17:54,800 --> 00:17:55,400
那我们现在

595
00:17:55,400 --> 00:17:57,400
就打开我们的目录文件夹

596
00:17:57,400 --> 00:17:58,766
它还没说完

597
00:17:59,133 --> 00:17:59,600
哎好了

598
00:17:59,600 --> 00:18:00,266
它已经说完了

599
00:18:00,300 --> 00:18:01,400
输出完了

600
00:18:01,533 --> 00:18:02,766
那我们现在来打开它

601
00:18:02,766 --> 00:18:04,000
这里面做了哪些工作

602
00:18:04,000 --> 00:18:04,366
这里面

603
00:18:04,366 --> 00:18:07,033
就发送了一些相关的协议的内容

604
00:18:07,033 --> 00:18:09,566
然后创建文件成功的内容

605
00:18:09,600 --> 00:18:11,033
那我们打开文件夹

606
00:18:12,366 --> 00:18:14,266
对打开我的桌面

607
00:18:14,300 --> 00:18:17,400
哎这里面多了一个 MCP 学习的文件夹

608
00:18:17,400 --> 00:18:18,366
蛮有意思的

609
00:18:18,366 --> 00:18:22,200
就是它真正的通过我们控制大模型

610
00:18:22,266 --> 00:18:24,500
然后中间有个 MCP 的一个工具

611
00:18:24,533 --> 00:18:26,000
或 MCP 的协议

612
00:18:26,000 --> 00:18:29,400
真正的把工具跟大模型结合起来了

613
00:18:29,400 --> 00:18:31,666
就不像刚才就告诉我你应该怎么做

614
00:18:31,700 --> 00:18:33,366
然后还要等我自己去写段代码

615
00:18:33,366 --> 00:18:34,600
直接帮我去执行了

616
00:18:34,600 --> 00:18:35,466
但是他的执行

617
00:18:35,500 --> 00:18:37,366
不是说执行上面的代码

618
00:18:37,366 --> 00:18:39,433
而是执行我们一个 file system 的

619
00:18:39,433 --> 00:18:41,766
一个相关的系统的内容

620
00:18:42,966 --> 00:18:44,633
快乐时光过得真的快

621
00:18:44,633 --> 00:18:45,100
这里面

622
00:18:45,133 --> 00:18:48,433
其实只是讲了 MCP 到底是什么

623
00:18:48,433 --> 00:18:50,666
还有 MCP 的一个初步的使用

624
00:18:50,700 --> 00:18:51,933
然后做一个总结

625
00:18:51,933 --> 00:18:53,533
我们将会在下节内容

626
00:18:53,533 --> 00:18:55,833
深入的去打开 MCP 的一个代码

627
00:18:55,833 --> 00:18:57,500
它到底是怎么去运作的

628
00:18:57,533 --> 00:19:00,533
然后 MCP 的一个逻辑的架构图和结构

629
00:19:00,900 --> 00:19:01,500
真正看一下

630
00:19:01,500 --> 00:19:03,533
MCP 如何跟工具和大模型

631
00:19:03,533 --> 00:19:04,700
进行一个建立的

632
00:19:04,700 --> 00:19:05,733
那我们现在来看看

633
00:19:05,733 --> 00:19:07,233
总结和思考的内容

634
00:19:07,233 --> 00:19:09,600
也是 ZOMI 想跟大家一起分享的

635
00:19:10,233 --> 00:19:13,400
首先我们来看看 MCP 的一个局限了

636
00:19:13,400 --> 00:19:15,366
这个也是 ZOMI 用完之后

637
00:19:15,366 --> 00:19:16,833
或者 ZOMI 看完代码之后

638
00:19:16,833 --> 00:19:18,100
觉得有一些问题的

639
00:19:18,133 --> 00:19:18,833
首先现在

640
00:19:18,833 --> 00:19:20,500
这里面的文档的工具

641
00:19:20,533 --> 00:19:21,933
是非常的重要的

642
00:19:21,933 --> 00:19:23,933
因为大语言模型主要是通过 prompt

643
00:19:23,933 --> 00:19:25,233
或者我们输入的文本

644
00:19:25,233 --> 00:19:27,233
去感知进行输入和输出的

645
00:19:27,233 --> 00:19:28,466
也就是所谓的 tokens

646
00:19:28,766 --> 00:19:31,233
每秒或者 tokens 的一个收费

647
00:19:31,233 --> 00:19:32,400
也就是所谓的词源

648
00:19:32,400 --> 00:19:33,633
那大模型

649
00:19:33,633 --> 00:19:35,366
通过一个工具的文档的描述

650
00:19:35,366 --> 00:19:37,666
来去理解我们的一些

651
00:19:37,700 --> 00:19:39,300
怎么去选择工具的

652
00:19:39,300 --> 00:19:41,566
所以我们需要精心的去编写

653
00:19:41,566 --> 00:19:42,633
工具的名称

654
00:19:42,633 --> 00:19:45,633
document string 和相关的参数的说明的

655
00:19:45,733 --> 00:19:47,166
那这个是第一个局限性

656
00:19:47,166 --> 00:19:49,300
就是所谓的文档很重要

657
00:19:49,333 --> 00:19:50,400
国人不会写文档的

658
00:19:50,400 --> 00:19:52,433
或者写文档不好的程序员

659
00:19:52,433 --> 00:19:54,233
可能导致你的工具很难用

660
00:19:54,233 --> 00:19:55,366
实际上不是工具难用

661
00:19:55,366 --> 00:19:56,900
而是你的文档没写好

662
00:19:56,966 --> 00:19:57,433
所以这个

663
00:19:57,433 --> 00:19:59,000
就是大语言模型的一个问题

664
00:19:59,000 --> 00:20:00,666
它主要是理解文本嘛

665
00:20:00,733 --> 00:20:02,900
那这个就是工具的使用和理解

666
00:20:02,900 --> 00:20:03,700
现在来说

667
00:20:03,700 --> 00:20:07,000
严重依赖于大语言模型的一个基础能力

668
00:20:07,133 --> 00:20:08,566
工具的数量

669
00:20:08,566 --> 00:20:10,666
还会严重的依赖于大语言模型的

670
00:20:10,700 --> 00:20:12,600
长上下文的一个记忆能力的

671
00:20:12,600 --> 00:20:15,233
那我们将会在下一步来去讲讲解的

672
00:20:15,233 --> 00:20:18,300
也就是我们的工具跟我们的 prompt

673
00:20:18,333 --> 00:20:20,400
需要同时输给我们的大模型的

674
00:20:20,400 --> 00:20:22,500
我们的工具越来越多

675
00:20:22,533 --> 00:20:24,733
我们的 LLM 的上下文的消耗

676
00:20:24,733 --> 00:20:26,366
就会越来越大

677
00:20:26,366 --> 00:20:28,800
那这就是这就是一个比较严重的问题

678
00:20:28,800 --> 00:20:29,366
而且

679
00:20:29,366 --> 00:20:31,200
如果模型的参数规模比较小

680
00:20:31,200 --> 00:20:32,266
它的理解能力

681
00:20:32,300 --> 00:20:33,600
可能会越来越差

682
00:20:33,600 --> 00:20:34,633
或者没那么的好

683
00:20:34,633 --> 00:20:35,900
不一定能够很好的发挥

684
00:20:35,933 --> 00:20:37,400
我们工具的作用

685
00:20:37,400 --> 00:20:39,966
这个就是现在的一个第二个问题

686
00:20:39,966 --> 00:20:40,700
那第三个

687
00:20:40,733 --> 00:20:42,633
就是每一次模型的调用了

688
00:20:42,633 --> 00:20:45,000
只能选择有限的工具而

689
00:20:45,000 --> 00:20:46,900
不能说真正的做到智能

690
00:20:46,933 --> 00:20:48,566
真正的可能像我们人一样

691
00:20:48,566 --> 00:20:50,033
知道我们可以有很多的工具

692
00:20:50,033 --> 00:20:51,400
能做很多的联想

693
00:20:51,400 --> 00:20:54,166
我们有两只手就可以创造工具

694
00:20:54,166 --> 00:20:54,966
大模型不行

695
00:20:54,966 --> 00:20:56,100
你给我提供工具

696
00:20:56,133 --> 00:20:57,633
我告诉你 123 应该做什么

697
00:20:57,633 --> 00:20:59,200
然后去调用这些工具

698
00:20:59,233 --> 00:21:00,700
所以说我们预计

699
00:21:00,733 --> 00:21:03,000
随着大模型的基础能力的提升

700
00:21:03,033 --> 00:21:04,700
可能 MCP 这些工具

701
00:21:04,733 --> 00:21:07,100
会逐一的去被替换掉的

702
00:21:07,100 --> 00:21:09,333
这也是我总觉得 MCP 的一个局限性

703
00:21:09,566 --> 00:21:10,500
那既然这样了

704
00:21:10,533 --> 00:21:11,433
我们可以看到

705
00:21:11,433 --> 00:21:12,000
蛮有意思的

706
00:21:12,000 --> 00:21:14,166
就是对 MCP 进行一个思考

707
00:21:14,166 --> 00:21:15,266
那现在来看到

708
00:21:15,300 --> 00:21:16,566
就是 MCP 的 Claude

709
00:21:16,566 --> 00:21:18,200
主要是对 MCP 的 sever

710
00:21:18,200 --> 00:21:20,266
提供了相关的工具和文档

711
00:21:20,433 --> 00:21:22,066
为什么我们觉得

712
00:21:22,100 --> 00:21:23,600
可能用 Claude 的模型

713
00:21:23,600 --> 00:21:25,466
使用 MCP 会更加顺

714
00:21:25,500 --> 00:21:26,966
因为整个 Anthropic

715
00:21:26,966 --> 00:21:27,700
或者 Claude

716
00:21:27,733 --> 00:21:28,800
肯定是对 MCP

717
00:21:28,800 --> 00:21:30,966
进行了专门的后训练和微调的

718
00:21:30,966 --> 00:21:31,833
使得 Claude

719
00:21:31,833 --> 00:21:34,166
能够更好的去使用 MCP 的能力

720
00:21:34,166 --> 00:21:36,166
这是原厂的问题嘛

721
00:21:36,166 --> 00:21:38,100
或者原厂的一个便利性

722
00:21:38,133 --> 00:21:39,366
或者原厂的利益

723
00:21:39,533 --> 00:21:41,033
那 MCP 的选择

724
00:21:41,033 --> 00:21:42,700
其实主要是基于 prompt 的

725
00:21:42,733 --> 00:21:43,500
就理论上

726
00:21:43,500 --> 00:21:45,100
我们任何的大语言模型

727
00:21:45,100 --> 00:21:47,000
都可以适配 MCP

728
00:21:47,000 --> 00:21:49,666
只需要提供对应的工具的描述

729
00:21:49,700 --> 00:21:51,300
也就所谓的 prompt 就行了

730
00:21:51,300 --> 00:21:53,500
当使用不是 Claude 的模型

731
00:21:53,500 --> 00:21:56,333
有可能会使得我们 MCP 的效果体验

732
00:21:56,333 --> 00:21:58,100
比较难保证

733
00:21:58,100 --> 00:21:59,500
因此我们预计

734
00:21:59,500 --> 00:22:01,366
未来其他的 AI 模型

735
00:22:01,366 --> 00:22:03,766
也会对 MCP 相关的工具和文件

736
00:22:03,766 --> 00:22:05,766
进行后训练和微调的

737
00:22:05,766 --> 00:22:06,966
也有所谓的 MCP

738
00:22:06,966 --> 00:22:08,433
会提供一系列的工具

739
00:22:08,433 --> 00:22:10,766
相关的 document string 的描述

740
00:22:10,766 --> 00:22:12,866
我们把这些描述集合起来

741
00:22:12,900 --> 00:22:14,900
做成一个所谓的 file tuning

742
00:22:14,900 --> 00:22:17,566
或者 instruct tuning 的相关的一个数据集

743
00:22:17,566 --> 00:22:19,000
给到我们的大语言模型

744
00:22:19,000 --> 00:22:21,233
进行重新的后训练或者微调

745
00:22:21,233 --> 00:22:22,633
使得 AI Agent

746
00:22:22,633 --> 00:22:24,866
或者我们的大模型的基础能力

747
00:22:24,900 --> 00:22:26,800
能够更好地应对 MCP

748
00:22:26,800 --> 00:22:27,433
那这个

749
00:22:27,433 --> 00:22:28,800
现在的很多的模型

750
00:22:28,800 --> 00:22:30,766
开始加入这些能力了

751
00:22:30,966 --> 00:22:33,033
那我们进一步的来看

752
00:22:33,033 --> 00:22:34,966
未来的 MCP 的能力

753
00:22:34,966 --> 00:22:37,466
就随着我们的一些 MCP 相关的 document

754
00:22:37,500 --> 00:22:40,233
stream 加入到一个后训练跟微调了

755
00:22:40,233 --> 00:22:42,200
也就是所谓的 MCP 的能力

756
00:22:42,200 --> 00:22:45,266
会慢慢的集成到模型的训练环节

757
00:22:45,300 --> 00:22:48,166
使得我们整个基础模型更加的智能

758
00:22:48,166 --> 00:22:50,866
那我们可以看到 MCP 的最终的形态

759
00:22:50,900 --> 00:22:51,566
有可能是

760
00:22:51,566 --> 00:22:54,300
我们的基础模型的能力的提升

761
00:22:54,333 --> 00:22:56,366
而不是 MCP 做的有多牛逼

762
00:22:56,366 --> 00:22:59,300
MCP 这个协议能够带来革命的变化

763
00:22:59,333 --> 00:23:00,400
真正革命的变化

764
00:23:00,400 --> 00:23:02,300
还是我们的 AIAgent 算法的变化

765
00:23:02,333 --> 00:23:04,833
和真正的基础模型

766
00:23:04,833 --> 00:23:07,833
大模型能力原生能力的提升

767
00:23:07,833 --> 00:23:09,900
这个就是 ZOMI 的一个观点了

768
00:23:09,933 --> 00:23:11,166
当然了不管怎么样

769
00:23:11,166 --> 00:23:14,000
MCP 的一些概念股也都已经炒过了

770
00:23:14,000 --> 00:23:15,500
那接下来我们看一下

771
00:23:15,533 --> 00:23:19,000
之前有一个论调就是初看 MCP

772
00:23:19,000 --> 00:23:20,000
它是个协议

773
00:23:20,000 --> 00:23:20,600
那我觉得

774
00:23:20,600 --> 00:23:22,100
没问题它就是个协议

775
00:23:22,166 --> 00:23:23,233
那二看 MCP

776
00:23:23,233 --> 00:23:24,800
有些人觉得它是个商业

777
00:23:24,800 --> 00:23:25,900
但是在 ZOMI 觉得

778
00:23:25,933 --> 00:23:27,933
它其实还是个工具

779
00:23:28,000 --> 00:23:29,166
那第三看 MCP

780
00:23:29,166 --> 00:23:31,833
觉得是 AI 应用的一个入口

781
00:23:31,833 --> 00:23:34,500
其实我觉得它只能说

782
00:23:34,533 --> 00:23:35,733
做一个协议

783
00:23:35,733 --> 00:23:36,800
做一个工具

784
00:23:36,800 --> 00:23:38,233
真正的应用的入口

785
00:23:38,233 --> 00:23:40,433
还是看模型的基础的能力

786
00:23:40,433 --> 00:23:41,900
比如像 DeepSeek

787
00:23:42,333 --> 00:23:46,600
DeepSeek R1 这种真正的模型的能力出现了

788
00:23:46,600 --> 00:23:50,433
我们才能够更好的打开 AI 的潘多拉

789
00:23:50,433 --> 00:23:52,100
而不是一个 MCP

790
00:23:52,133 --> 00:23:53,800
因为 MCP 我们刚才讲到了

791
00:23:53,800 --> 00:23:54,966
只是跟我们的大模型

792
00:23:54,966 --> 00:23:56,966
跟工具之间的一个链路

793
00:23:56,966 --> 00:23:58,766
它改变不了工具更好用

794
00:23:58,766 --> 00:24:01,166
也改变不了模型更好用

795
00:24:01,233 --> 00:24:02,300
只是加速了 agent

796
00:24:02,333 --> 00:24:04,833
跟工具之间的一个链路

797
00:24:05,133 --> 00:24:06,200
今天的内容

798
00:24:06,200 --> 00:24:07,266
就到这里为止

799
00:24:07,300 --> 00:24:09,800
最后还有一个 MCP 的未来

800
00:24:09,800 --> 00:24:10,900
那我们可以看到这个

801
00:24:10,933 --> 00:24:13,000
其实我们将会在后面的内容

802
00:24:13,000 --> 00:24:14,266
跟大家去分享的

803
00:24:14,300 --> 00:24:15,400
然后再做总结的

804
00:24:15,400 --> 00:24:15,866
那这里面

805
00:24:15,900 --> 00:24:18,100
ZOMI 先把结论先抛出来

806
00:24:18,100 --> 00:24:19,300
首先我们可以看到

807
00:24:19,300 --> 00:24:20,766
操作系统跟数据库

808
00:24:20,766 --> 00:24:22,533
等一些传统的基础软件

809
00:24:22,533 --> 00:24:24,333
传统基础软件就无非操作系统

810
00:24:24,333 --> 00:24:25,100
数据库嘛

811
00:24:25,100 --> 00:24:27,933
还有我们的 html 网页的应用

812
00:24:27,933 --> 00:24:29,766
会快速的接入到 MCP

813
00:24:29,766 --> 00:24:31,200
这个就是现状

814
00:24:31,200 --> 00:24:32,700
你要提供大模型的能力

815
00:24:32,733 --> 00:24:34,033
进行一个调用的

816
00:24:34,366 --> 00:24:36,000
那我们反观回来看一下

817
00:24:36,000 --> 00:24:37,966
一个 MCP 的 service 里面

818
00:24:38,533 --> 00:24:40,366
我们可以看到 Postgresql

819
00:24:40,366 --> 00:24:41,300
也集成进去了

820
00:24:41,333 --> 00:24:43,500
很多相关的应用

821
00:24:43,500 --> 00:24:46,033
或者我们的传统的一些基础软件

822
00:24:46,033 --> 00:24:48,400
都集成进去了在我们的 MCP

823
00:24:48,400 --> 00:24:50,266
但是你会发现像微信

824
00:24:50,300 --> 00:24:51,333
美团京东

825
00:24:51,333 --> 00:24:52,633
为什么没集成进去

826
00:24:52,633 --> 00:24:55,766
我们移动互联网时代的超级应用

827
00:24:55,766 --> 00:24:56,400
实际上

828
00:24:56,400 --> 00:24:58,833
它自身作为一个超庞大的 agent

829
00:24:58,833 --> 00:25:00,200
或者智能体

830
00:25:00,266 --> 00:25:02,300
他对外的是提供 Agent 的服务

831
00:25:02,333 --> 00:25:04,500
所以他很多都不会集成进去

832
00:25:04,500 --> 00:25:07,133
反倒是可能传统的会集成到 MCP

833
00:25:07,133 --> 00:25:08,033
那超级应用的

834
00:25:08,033 --> 00:25:09,166
移动互联网的时代

835
00:25:09,166 --> 00:25:11,100
可能不会集成到我们的 MCP

836
00:25:11,133 --> 00:25:12,700
因为我不可能说把我的价格

837
00:25:12,700 --> 00:25:14,900
把我的很多的东西都外泄出去

838
00:25:14,900 --> 00:25:16,900
反倒我希望别人用我的服务

839
00:25:16,900 --> 00:25:17,700
所以说 ZOMI

840
00:25:17,700 --> 00:25:19,800
有一个简单的论调或者总结

841
00:25:19,800 --> 00:25:20,833
不知道对不对

842
00:25:20,833 --> 00:25:22,900
就传统的 HPC 的相关的应用

843
00:25:22,933 --> 00:25:24,633
会快速的拥抱 MCP

844
00:25:24,700 --> 00:25:26,933
但是移动互联网的一些超级 APP

845
00:25:26,933 --> 00:25:28,933
可能更好的去拥抱 A2A

846
00:25:28,933 --> 00:25:30,700
所谓的 A2A 就是谷歌推出的

847
00:25:30,700 --> 00:25:31,500
agent 对 agent

848
00:25:31,766 --> 00:25:33,633
我有一个 DeepSeek 的大模型

849
00:25:33,633 --> 00:25:34,800
我 DeepSeek 的大模型

850
00:25:34,800 --> 00:25:36,366
想跟美团去互动

851
00:25:36,366 --> 00:25:37,166
那我美团

852
00:25:37,166 --> 00:25:39,200
就可能有一个美团的大模型

853
00:25:39,200 --> 00:25:40,366
两个大模型之间

854
00:25:40,366 --> 00:25:41,633
进行一个互动

855
00:25:41,633 --> 00:25:42,433
进行一个交互

856
00:25:42,433 --> 00:25:44,666
进行一个服务性的交易的

857
00:25:44,700 --> 00:25:45,200
那这个

858
00:25:45,200 --> 00:25:47,866
就是 ZOMI 觉得可能传统的 HPC

859
00:25:47,900 --> 00:25:49,166
更好拥抱 MCP

860
00:25:49,166 --> 00:25:51,966
移动互联网的更好的拥抱 A2A

861
00:25:51,966 --> 00:25:53,033
那今天的内容

862
00:25:53,033 --> 00:25:54,000
就到这为止了

863
00:25:54,000 --> 00:25:55,900
我们将会在下一节视频里面

864
00:25:55,933 --> 00:26:00,033
再深入的去打开 MCP 相关的代码

